// VisionAgentSimulationViewDlg.cpp : 구현 파일입니다.
#include "stdafx.h"
#include "VisionAgent.h"
#include "VisionAgentDlg.h"
#include "VisionAgentSimulationViewDlg.h"
#include "afxdialogex.h"


// CVisionAgentSimulationViewDlg 대화 상자입니다.
IMPLEMENT_DYNAMIC(CVisionAgentSimulationViewDlg, CDialogEx)

CVisionAgentSimulationViewDlg::CVisionAgentSimulationViewDlg(CWnd* pParent /*=NULL*/)
: CDialogEx(IDD_VISION_AGENT_SIMULATION_VIEW_DIALOG, pParent)
{
	CVisionAgentDlg *pDlg = (CVisionAgentDlg *)theApp.m_pMainWnd;
	LOGBRUSH lbr;
	int i = 0;

	////////////////////////////////////////////
	m_nRealWidth = 4000;		//window width
	m_nRealHeight = 2000;		//window height
	m_nZbarHeight = 400;		//Z축표시 height
	////////////////////////////////////////////

	Colorbrush.CreateSolidBrush(RGB(50, 50, 50));

	m_brBlack.CreateSolidBrush(RGB(0, 0, 0));
	m_brLoadport.CreateSolidBrush(RGB(30, 60, 60));
	m_brLoader.CreateSolidBrush(RGB(150, 90, 150));
	m_brGantryStone.CreateSolidBrush(RGB(150, 150, 150));
	m_brGantryY.CreateSolidBrush(RGB(130, 190, 130));
	m_brInspect.CreateSolidBrush(RGB(230, 230, 230));
	m_br3d.CreateSolidBrush(RGB(50, 50, 50));
	m_brBackLightX.CreateSolidBrush(RGB(20, 110, 180));
	m_brUnloaderY.CreateSolidBrush(RGB(30, 30, 30));
	m_brUnloader.CreateSolidBrush(RGB(30, 90, 90));
	m_brCamOn.CreateSolidBrush(RGB(250, 50, 50));
	m_brCamOff.CreateSolidBrush(RGB(150, 120, 60));
	m_brReverse.CreateSolidBrush(RGB(150, 200, 220));
	m_brUnloadstage.CreateSolidBrush(RGB(30, 60, 60));
	m_brCassette.CreateSolidBrush(RGB(30, 30, 60));
	m_brUnitBox.CreateSolidBrush(RGB(150, 60, 60));
	m_brStick.CreateSolidBrush(RGB(250, 250, 90));
	m_brStretch.CreateSolidBrush(RGB(255, 255, 0));

	lbr.lbStyle = BS_SOLID;
	lbr.lbHatch = 0;
	lbr.lbColor = RGB(127, 127, 127);	m_Black.CreatePen(PS_GEOMETRIC | PS_SOLID, 3, &lbr, 0, 0);
	lbr.lbColor = RGB(127, 127, 127);	m_Align.CreatePen(PS_GEOMETRIC | PS_DOT, 3, &lbr, 0, 0);
	lbr.lbColor = RGB(0, 200, 0);		m_Frame.CreatePen(PS_GEOMETRIC | PS_SOLID, 3, &lbr, 0, 0);
	lbr.lbColor = RGB(0, 127, 0);		m_Worked.CreatePen(PS_GEOMETRIC | PS_SOLID, 3, &lbr, 0, 0);
	lbr.lbColor = RGB(127, 0, 0);		m_NonWorked.CreatePen(PS_GEOMETRIC | PS_DOT, 3, &lbr, 0, 0);
	lbr.lbColor = RGB(0, 200, 200);		m_YBlock.CreatePen(PS_GEOMETRIC | PS_SOLID, 3, &lbr, 0, 0);
	lbr.lbColor = RGB(0, 200, 200);		m_Loader.CreatePen(PS_GEOMETRIC | PS_SOLID, 3, &lbr, 0, 0);

	m_Font.CreateFontW(50, 0, 0, 0, FW_THIN, 0, 0, 0, 0, 0, 0, 10, 0, _T("Verdana"));

	//축기본값 설정 scale,min,max					//offset x,y								//표시될박스 width,height
	setAxisScale(&AxGantryX, 1.5, -450, 450);		setAxisOffset(&AxGantryX, 0, 250);			setAxisBoxX(&AxGantryX, 110, 100);
	setAxisScale(&AxBackLightX, 1, 0, 415);		setAxisOffset(&AxBackLightX, 0, 250);			setAxisBoxY(&AxBackLightX, 100, 810);
	//setAxisScale(&AxInspectX, 1, -100, 100);		setAxisOffset(&AxInspectX, 0, 0);			setAxisBoxX(&AxInspectX, 100, 100);
	setAxisScale(&Ax3dX, 0.6, -1100, 1100);			setAxisOffset(&Ax3dX, 0, -450);				setAxisBoxX(&Ax3dX, 100, 50);

	setAxisScale(&AxGantryY, 0.8, -750, 750);		setAxisOffset(&AxGantryY, 0, 200);			setAxisBoxY(&AxGantryY, 1960, 80);
	setAxisScale(&AxInspectY, 0.4, -500, 0);		setAxisOffset(&AxInspectY, 0, 200);			setAxisBoxY(&AxInspectY, 1460, 760);
	setAxisScale(&AxUnloaderY, 0.4, -1600, 0);		setAxisOffset(&AxUnloaderY, 0, -650);		setAxisBoxY(&AxUnloaderY, 1600, 60);
	setAxisScale(&AxBoxCamLeftY, 0.3, 0, 400);			setAxisOffset(&AxBoxCamLeftY, -800, 950);		setAxisBoxY(&AxBoxCamLeftY, 60, 80);
	setAxisScale(&AxBoxCamRightY, 0.3, 0, 400);		setAxisOffset(&AxBoxCamRightY, 800, 950);		setAxisBoxY(&AxBoxCamRightY, 60, 80);
	setAxisScale(&AxUnloadstageY, 170, 0, 1);		setAxisOffset(&AxUnloadstageY, 0, -640);	setAxisBoxY(&AxUnloadstageY, 1460, 260);

	setAxisScale(&AxCameraZ1, 1, 0, 237);			setAxisOffset(&AxCameraZ1, 0, 0);			setAxisBoxZ(&AxCameraZ1, 100, 70);
	setAxisScale(&AxCameraZ2, 1, 0, 234);			setAxisOffset(&AxCameraZ2, 0, 0);			setAxisBoxZ(&AxCameraZ2, 100, 70);
	//setAxisScale(&AxCameraZ3, 1, -400, 0);			setAxisOffset(&AxCameraZ3, 0, 0);			setAxisBoxZ(&AxCameraZ3, 100, 70);
	setAxisScale(&AxLoaderZ, 1, -180, 0);			setAxisOffset(&AxLoaderZ, 0, 0);			setAxisBoxZ(&AxLoaderZ, 100, 100);
	setAxisScale(&AxUnloaderZ, 1, -270, 0);			setAxisOffset(&AxUnloaderZ, 0, 0);			setAxisBoxZ(&AxUnloaderZ, 100, 100);
	//setAxisScale(&AxInspectZ, 1, -6, 1);			setAxisOffset(&AxInspectZ, 0, 0);			setAxisBoxZ(&AxInspectZ, 100, 100);
	setAxisScale(&AxCassetteZ, 1, 0, 550);			setAxisOffset(&AxCassetteZ, 0, -880);		setAxisBoxZ(&AxCassetteZ, 1500, 160);
	setAxisScale(&AxLoadport, 1, 0, 0);				setAxisOffset(&AxLoadport, 0, 880);			setAxisBoxZ(&AxLoadport, 1500, 180);

	for (i = 0; i < GRIPPER_ROW; i++)
	{
		setAxisScale(&AxStretchL[i], 3.0, -5, 25);		setAxisOffset(&AxStretchL[i], -825, 200 + (i * 50));	setAxisBoxX(&AxStretchL[i], 500, 30);
		setAxisScale(&AxStretchR[i], 3.0, -5, 25);		setAxisOffset(&AxStretchR[i], 825, 200 + (i * 50));	setAxisBoxX(&AxStretchR[i], 500, 30);
	}

	//BackLight X
	setAxisOffset(&AxBackLightX, AxInspectY.box.left + 50, AxInspectY.box.bottom);
	AxBackLightX.box.top = AxInspectY.box.top - 50;
	AxBackLightX.box.bottom = AxInspectY.box.bottom + 50;

	AxUnloaderY.box.left = AxGantryX.scope.left - 150;
	AxUnloaderY.box.right = AxGantryX.scope.right + 150;

	AxLoaderZ.box.left = AxGantryX.scope.left;
	AxLoaderZ.box.right = AxGantryX.scope.right;
	Ax3dX.box.bottom = Ax3dX.box.top + 150;
	AxGantryX.box.top = AxGantryX.box.bottom - 150;
	AxUnloaderY.scope.top -= 20;
	AxUnloaderY.scope.bottom += 20;
	AxGantryY.scope.top -= 20;
	AxGantryY.scope.bottom += 20;


	//Z축bar
	setAxisZbar(&AxLoaderZ, -1900, -800);
	//setAxisZbar(&AxInspectZ, -1800, -800);
	setAxisZbar(&AxCameraZ1, -1700, -800);
	setAxisZbar(&AxCameraZ2, -1600, -800);
	//setAxisZbar(&AxCameraZ3, -1500, -800);
	setAxisZbar(&AxUnloaderZ, -1400, -800);
	setAxisZbar(&AxCassetteZ, -1300, -800);
}

CVisionAgentSimulationViewDlg::~CVisionAgentSimulationViewDlg()
{
	Colorbrush.DeleteObject();
	m_brBlack.DeleteObject();
	m_br3d.DeleteObject();
	m_brGantryY.DeleteObject();
	m_brUnloaderY.DeleteObject();
	m_brBackLightX.DeleteObject();
	m_brGantryStone.DeleteObject();
	m_brLoader.DeleteObject();
	m_brUnloader.DeleteObject();
	m_brCamOn.DeleteObject();
	m_brCamOff.DeleteObject();
	m_brStick.DeleteObject();
	m_brInspect.DeleteObject();
	m_brUnloadstage.DeleteObject();
	m_brReverse.DeleteObject();
	m_brLoadport.DeleteObject();
	m_brCassette.DeleteObject();
	m_brUnitBox.DeleteObject();
	m_NonWorked.DeleteObject();
	m_Align.DeleteObject();
	m_Frame.DeleteObject();
	m_Worked.DeleteObject();
	m_NonWorked.DeleteObject();
	m_YBlock.DeleteObject();
	m_Loader.DeleteObject();
	m_brStretch.DeleteObject();
}

void CVisionAgentSimulationViewDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

// CVisionAgentSimulationViewDlg 메시지 처리기입니다.
BEGIN_MESSAGE_MAP(CVisionAgentSimulationViewDlg, CDialogEx)
	ON_WM_SHOWWINDOW()
	ON_WM_TIMER()
	//ON_WM_CTLCOLOR_REFLECT()
	//ON_WM_PAINT()
END_MESSAGE_MAP()


BOOL CVisionAgentSimulationViewDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();
	return TRUE;
}

void CVisionAgentSimulationViewDlg::OnShowWindow(BOOL bShow, UINT nStatus)
{
	CDialog::OnShowWindow(bShow, nStatus);

	if (bShow == TRUE){
		SetTimer(1, 300, NULL);
	}
	else if (bShow == FALSE){
		KillTimer(1);
	}
}

void CVisionAgentSimulationViewDlg::OnTimer(UINT_PTR nIDEvent)
{
	Draw_Picture();

	CDialogEx::OnTimer(nIDEvent);
}

void CVisionAgentSimulationViewDlg::OnCancel()
{
	CVisionAgentDlg * pDlg = (CVisionAgentDlg *)theApp.m_pMainWnd;
	pDlg->OnCancel();
	//CDialogEx::OnCancel();
}

void CVisionAgentSimulationViewDlg::OnOK()
{
	//CDialogEx::OnOK();
}

//축Scale 초기화
void CVisionAgentSimulationViewDlg::setAxisScale(stUnitAxis* axis, double dscale, double dmin, double dmax)
{
	axis->dscale = dscale;
	axis->dmin = dmin;
	axis->dmax = dmax;
}

//축Offset 초기화
void CVisionAgentSimulationViewDlg::setAxisOffset(stUnitAxis* axis, int xoffset, int yoffset)
{
	axis->xoffset = xoffset;
	axis->yoffset = yoffset;
}

//X축초기화
void CVisionAgentSimulationViewDlg::setAxisBoxX(stUnitAxis* axis, int nboxwidth, int nboxheight)
{
	axis->box.left = axis->dpos * axis->dscale + axis->xoffset - nboxwidth / 2;
	axis->box.right = axis->dpos * axis->dscale + axis->xoffset + nboxwidth / 2;
	axis->box.top = axis->yoffset - nboxheight / 2;
	axis->box.bottom = axis->yoffset + nboxheight / 2;
	axis->scope.left = axis->dmin * axis->dscale + axis->xoffset - nboxwidth / 2;
	axis->scope.right = axis->dmax * axis->dscale + axis->xoffset + nboxwidth / 2;
	axis->scope.top = axis->box.top;
	axis->scope.bottom = axis->box.bottom;
}

//Y축초기화
void CVisionAgentSimulationViewDlg::setAxisBoxY(stUnitAxis* axis, int nboxwidth, int nboxheight)
{
	axis->box.left = axis->xoffset - nboxwidth / 2;
	axis->box.right = axis->xoffset + nboxwidth / 2;
	axis->box.top = axis->yoffset - (axis->dpos * axis->dscale) - nboxheight / 2;
	axis->box.bottom = axis->yoffset - (axis->dpos * axis->dscale) + nboxheight / 2;
	axis->scope.left = axis->box.left;
	axis->scope.right = axis->box.right;
	axis->scope.top = axis->yoffset - (axis->dmax * axis->dscale) - nboxheight / 2;
	axis->scope.bottom = axis->yoffset - (axis->dmin * axis->dscale) + nboxheight / 2;
}

//Z축초기화
void CVisionAgentSimulationViewDlg::setAxisBoxZ(stUnitAxis* axis, int nboxwidth, int nboxheight)
{
	axis->dscale = m_nZbarHeight / (axis->dmax - axis->dmin);
	axis->box.left = axis->xoffset - nboxwidth / 2;
	axis->box.right = axis->xoffset + nboxwidth / 2;
	axis->box.top = axis->yoffset - nboxheight / 2;
	axis->box.bottom = axis->yoffset + nboxheight / 2;

	CRect	zbar;		//Z축박스
	CRect	zscope;		//Z이동범위
}

//Z-Bar초기화
void CVisionAgentSimulationViewDlg::setAxisZbar(stUnitAxis* axis, int nleft, int ntop)
{
	axis->zbar.SetRect(nleft, ntop, nleft + 90, ntop + 50);
	axis->zscope.SetRect(nleft, ntop, nleft + 90, ntop + m_nZbarHeight + 50);
}

//X축위치
void CVisionAgentSimulationViewDlg::setAxisPosX(stUnitAxis* axis, double dpos)
{
	int dtemp = axis->xoffset + (int)(dpos * axis->dscale);
	axis->dpos = dpos;
	axis->box.MoveToX(dtemp - (axis->box.right - axis->box.left) / 2);
}
//Stretch축 위치
void CVisionAgentSimulationViewDlg::setAxisPosStretch(stUnitAxis* axis, double dpos, double dPosBase)
{
	int dtemp = axis->xoffset + (int)(dpos * axis->dscale);
	axis->dpos = dpos;
	axis->box.MoveToX(dtemp - (axis->box.right - axis->box.left) / 2);
}
//Y축위치
void CVisionAgentSimulationViewDlg::setAxisPosY(stUnitAxis* axis, double dpos)
{
	int dtemp = axis->yoffset - (int)(dpos * axis->dscale); //위치 증가시 좌표는 감소
	axis->dpos = dpos;
	axis->box.MoveToY(dtemp - (axis->box.bottom - axis->box.top) / 2);
	axis->zbar.MoveToY(dtemp);
}
//Z축위치
void CVisionAgentSimulationViewDlg::setAxisPosZ(stUnitAxis* axis, double dpos)
{
	int dtemp = axis->zscope.top + (int)((axis->dmax - dpos) * axis->dscale);  //위치 증가시 좌표는 감소
	axis->dpos = dpos;
	axis->zbar.MoveToY(dtemp);
}

void CVisionAgentSimulationViewDlg::setAxisUVWpos(stUnitAxisUVW* axis, double du, double dv, double dw)
{
	axis->upos = du;
	axis->vpos = dv;
	axis->wpos = dw;
}

void CVisionAgentSimulationViewDlg::Get_UnitPosition()
{
	int i = 0;

	setAxisPosX(&AxGantryX, SharedInfo::GetCmdPos(AXIS_GANTRY_X));
	setAxisPosX(&AxBackLightX, SharedInfo::GetCmdPos(AXIS_BACKLIGHT_X));

	setAxisPosY(&AxGantryY, SharedInfo::GetActPos(AXIS_VIRTUAL_GANTRY_Y));
	//setAxisPosY(&AxTrayBox, SharedInfo::DInputValue[_DIN_MASK_TRAY_DETECT_1] & SharedInfo::DInputValue[_DIN_MASK_TRAY_DETECT_2]);
	//setAxisPosY(&AxUnloadstageY, SharedInfo::DInputValue[_DIN_SEPARAT_PLATE_BACK]);
	setAxisPosY(&AxUnloaderY, SharedInfo::GetCmdPos(AXIS_UNLOADER_YL));
	setAxisPosY(&AxBoxCamLeftY, SharedInfo::GetCmdPos(AXIS_BOX_ALIGN_CAMERA_YL));
	setAxisPosY(&AxBoxCamRightY, SharedInfo::GetCmdPos(AXIS_BOX_ALIGN_CAMERA_YR));

	setAxisPosZ(&AxCameraZ1, SharedInfo::GetCmdPos(AXIS_CAMERA_Z1));
	setAxisPosZ(&AxCameraZ2, SharedInfo::GetCmdPos(AXIS_CAMERA_Z2));
	//setAxisPosZ(&AxCameraZ3, SharedInfo::GetCmdPos(AXIS_CAMERA_Z3));
	setAxisPosZ(&AxCassetteZ, SharedInfo::GetCmdPos(AXIS_MAGAZINE_LIFT_Z));
	setAxisPosZ(&AxLoaderZ, SharedInfo::GetCmdPos(AXIS_LOADER_Z));
	setAxisPosZ(&AxUnloaderZ, SharedInfo::GetCmdPos(AXIS_UNLOADER_Z));

	setAxisUVWpos(&AxInspectuvw, SharedInfo::GetCmdPos(AXIS_INSPECTION_STAGE_X), SharedInfo::GetCmdPos(AXIS_INSPECTION_STAGE_Y1), SharedInfo::GetCmdPos(AXIS_INSPECTION_STAGE_Y2));
	setAxisUVWpos(&AxBoxuvw, SharedInfo::GetCmdPos(AXIS_LOADING_STAGE_X), SharedInfo::GetCmdPos(AXIS_LOADING_STAGE_Y1), SharedInfo::GetCmdPos(AXIS_LOADING_STAGE_Y2));

	setAxisPosX(&AxStretchL[0], SharedInfo::GetCmdPos(AXIS_GRIPPER_STRETCH_L1));
	setAxisPosX(&AxStretchL[1], SharedInfo::GetCmdPos(AXIS_GRIPPER_STRETCH_L2));
	setAxisPosX(&AxStretchL[2], SharedInfo::GetCmdPos(AXIS_GRIPPER_STRETCH_L3));
	setAxisPosX(&AxStretchL[3], SharedInfo::GetCmdPos(AXIS_GRIPPER_STRETCH_L4));
	setAxisPosX(&AxStretchL[4], SharedInfo::GetCmdPos(AXIS_GRIPPER_STRETCH_L5));
	setAxisPosX(&AxStretchL[5], SharedInfo::GetCmdPos(AXIS_GRIPPER_STRETCH_L6));
	setAxisPosX(&AxStretchL[6], SharedInfo::GetCmdPos(AXIS_GRIPPER_STRETCH_L7));
	setAxisPosX(&AxStretchL[7], SharedInfo::GetCmdPos(AXIS_GRIPPER_STRETCH_L8));

	setAxisPosX(&AxStretchR[0], -SharedInfo::GetCmdPos(AXIS_GRIPPER_STRETCH_R1));
	setAxisPosX(&AxStretchR[1], -SharedInfo::GetCmdPos(AXIS_GRIPPER_STRETCH_R2));
	setAxisPosX(&AxStretchR[2], -SharedInfo::GetCmdPos(AXIS_GRIPPER_STRETCH_R3));
	setAxisPosX(&AxStretchR[3], -SharedInfo::GetCmdPos(AXIS_GRIPPER_STRETCH_R4));
	setAxisPosX(&AxStretchR[4], -SharedInfo::GetCmdPos(AXIS_GRIPPER_STRETCH_R5));
	setAxisPosX(&AxStretchR[5], -SharedInfo::GetCmdPos(AXIS_GRIPPER_STRETCH_R6));
	setAxisPosX(&AxStretchR[6], -SharedInfo::GetCmdPos(AXIS_GRIPPER_STRETCH_R7));
	setAxisPosX(&AxStretchR[7], -SharedInfo::GetCmdPos(AXIS_GRIPPER_STRETCH_R8));

	unitTension.TensionL[0] = SharedInfo::AInputValue[_AIN_STRETCH_L1];
	unitTension.TensionL[1] = SharedInfo::AInputValue[_AIN_STRETCH_L2];
	unitTension.TensionL[2] = SharedInfo::AInputValue[_AIN_STRETCH_L3];
	unitTension.TensionL[3] = SharedInfo::AInputValue[_AIN_STRETCH_L4];
	unitTension.TensionL[4] = SharedInfo::AInputValue[_AIN_STRETCH_L5];
	unitTension.TensionL[5] = SharedInfo::AInputValue[_AIN_STRETCH_L6];
	unitTension.TensionL[6] = SharedInfo::AInputValue[_AIN_STRETCH_L7];
	unitTension.TensionL[7] = SharedInfo::AInputValue[_AIN_STRETCH_L8];

	unitTension.TensionR[0] = SharedInfo::AInputValue[_AIN_STRETCH_R1];
	unitTension.TensionR[1] = SharedInfo::AInputValue[_AIN_STRETCH_R2];
	unitTension.TensionR[2] = SharedInfo::AInputValue[_AIN_STRETCH_R3];
	unitTension.TensionR[3] = SharedInfo::AInputValue[_AIN_STRETCH_R4];
	unitTension.TensionR[4] = SharedInfo::AInputValue[_AIN_STRETCH_R5];
	unitTension.TensionR[5] = SharedInfo::AInputValue[_AIN_STRETCH_R6];
	unitTension.TensionR[6] = SharedInfo::AInputValue[_AIN_STRETCH_R7];
	unitTension.TensionR[7] = SharedInfo::AInputValue[_AIN_STRETCH_R8];

	unitStretch.StretchL[0] = SharedInfo::GetCmdPos(AXIS_GRIPPER_STRETCH_L1);
	unitStretch.StretchL[1] = SharedInfo::GetCmdPos(AXIS_GRIPPER_STRETCH_L2);
	unitStretch.StretchL[2] = SharedInfo::GetCmdPos(AXIS_GRIPPER_STRETCH_L3);
	unitStretch.StretchL[3] = SharedInfo::GetCmdPos(AXIS_GRIPPER_STRETCH_L4);
	unitStretch.StretchL[4] = SharedInfo::GetCmdPos(AXIS_GRIPPER_STRETCH_L5);
	unitStretch.StretchL[5] = SharedInfo::GetCmdPos(AXIS_GRIPPER_STRETCH_L6);
	unitStretch.StretchL[6] = SharedInfo::GetCmdPos(AXIS_GRIPPER_STRETCH_L7);
	unitStretch.StretchL[7] = SharedInfo::GetCmdPos(AXIS_GRIPPER_STRETCH_L8);

	unitStretch.StretchR[0] = SharedInfo::GetCmdPos(AXIS_GRIPPER_STRETCH_R1);
	unitStretch.StretchR[1] = SharedInfo::GetCmdPos(AXIS_GRIPPER_STRETCH_R2);
	unitStretch.StretchR[2] = SharedInfo::GetCmdPos(AXIS_GRIPPER_STRETCH_R3);
	unitStretch.StretchR[3] = SharedInfo::GetCmdPos(AXIS_GRIPPER_STRETCH_R4);
	unitStretch.StretchR[4] = SharedInfo::GetCmdPos(AXIS_GRIPPER_STRETCH_R5);
	unitStretch.StretchR[5] = SharedInfo::GetCmdPos(AXIS_GRIPPER_STRETCH_R6);
	unitStretch.StretchR[6] = SharedInfo::GetCmdPos(AXIS_GRIPPER_STRETCH_R7);
	unitStretch.StretchR[7] = SharedInfo::GetCmdPos(AXIS_GRIPPER_STRETCH_R8);

	unitPitch.PitchL[0] = SharedInfo::GetCmdPos(AXIS_GRIPPER_PITCH_L1);
	unitPitch.PitchL[1] = SharedInfo::GetCmdPos(AXIS_GRIPPER_PITCH_L2);
	unitPitch.PitchL[2] = SharedInfo::GetCmdPos(AXIS_GRIPPER_PITCH_L3);
	unitPitch.PitchL[3] = SharedInfo::GetCmdPos(AXIS_GRIPPER_PITCH_L4);
	unitPitch.PitchL[4] = SharedInfo::GetCmdPos(AXIS_GRIPPER_PITCH_L5);
	unitPitch.PitchL[5] = SharedInfo::GetCmdPos(AXIS_GRIPPER_PITCH_L6);
	unitPitch.PitchL[6] = SharedInfo::GetCmdPos(AXIS_GRIPPER_PITCH_L7);
	unitPitch.PitchL[7] = SharedInfo::GetCmdPos(AXIS_GRIPPER_PITCH_L8);

	unitPitch.PitchR[0] = SharedInfo::GetCmdPos(AXIS_GRIPPER_PITCH_R1);
	unitPitch.PitchR[1] = SharedInfo::GetCmdPos(AXIS_GRIPPER_PITCH_R2);
	unitPitch.PitchR[2] = SharedInfo::GetCmdPos(AXIS_GRIPPER_PITCH_R3);
	unitPitch.PitchR[3] = SharedInfo::GetCmdPos(AXIS_GRIPPER_PITCH_R4);
	unitPitch.PitchR[4] = SharedInfo::GetCmdPos(AXIS_GRIPPER_PITCH_R5);
	unitPitch.PitchR[5] = SharedInfo::GetCmdPos(AXIS_GRIPPER_PITCH_R6);
	unitPitch.PitchR[6] = SharedInfo::GetCmdPos(AXIS_GRIPPER_PITCH_R7);
	unitPitch.PitchR[7] = SharedInfo::GetCmdPos(AXIS_GRIPPER_PITCH_R8);

	// 0:Home(Idle), 1 : Clamp, 2 : UnClamp, 3 : Fail
	for (i = 0; i < GRIPPER_ROW; i++)
	{
		if (SharedInfo::nClampStatus[0] != 2) unitClamp.ClampL[i] = _T("Off");
		else unitClamp.ClampL[i] = _T("On");

		if (SharedInfo::nClampStatus[i + GRIPPER_ROW] != 2) unitClamp.ClampR[i] = _T("Off");
		else unitClamp.ClampR[i] = _T("On");
	}
}

void CVisionAgentSimulationViewDlg::Draw_Unit(CDC *pDC)
{
	USES_CONVERSION;
	CVisionAgentDlg *pDlg = (CVisionAgentDlg *)theApp.m_pMainWnd;

	double		dy, dy1, dy2, dyL[GRIPPER_ROW], dyR[GRIPPER_ROW];
	double		dPosy[5];		//Stage 5개 Position Y 값
	int			ntemp;
	long		n1, n2;
	CString		sMsg, str;
	CRect		rect;
	LOGBRUSH	lbr;
	CPen		pen;
	int			oldBkMode;
	CPen*		poldPen;
	CFont*		poldFont;
	CBrush*		poldBrush;
	stUnitAxis	Ax;
	int i = 0;

	poldBrush = (CBrush*)pDC->SelectObject(&m_brBlack);
	poldPen = (CPen*)pDC->SelectObject(&pen);
	poldFont = (CFont*)pDC->SelectObject(&m_Font);
	oldBkMode = pDC->SetBkMode(OPAQUE);  //불투명배경

	//======================배경 그리기==========================	
	pDC->SetROP2(R2_COPYPEN);
	//배경 검정색으로
	CRect rcDraw(-m_nRealWidth / 2, -m_nRealHeight / 2, m_nRealWidth, m_nRealHeight / 2);
	pDC->SelectObject(&m_brBlack);
	pDC->FillRect(rcDraw, &m_brBlack);

	//3D범위
	pDC->SelectObject(&m_br3d);
	pDC->Rectangle(Ax3dX.scope);

	//BoxCamera 범위
	pDC->Rectangle(AxBoxCamLeftY.scope);
	pDC->Rectangle(AxBoxCamRightY.scope);

	//Stretch범위
	//pDC->Rectangle(AxStretchL[0].scope);
	//pDC->Rectangle(AxStretchL[1].scope);
	//pDC->Rectangle(AxStretchL[2].scope);
	//pDC->Rectangle(AxStretchL[3].scope);

	//pDC->Rectangle(AxStretchR[0].scope);
	//pDC->Rectangle(AxStretchR[1].scope);
	//pDC->Rectangle(AxStretchR[2].scope);
	//pDC->Rectangle(AxStretchR[3].scope);

	//Z-Bar
	pDC->SelectObject(&m_brGantryY);
	pDC->Rectangle(AxLoaderZ.zscope);
	pDC->Rectangle(AxUnloaderZ.zscope);
	pDC->Rectangle(AxCassetteZ.zscope);
	pDC->Rectangle(AxCameraZ1.zscope);
	pDC->Rectangle(AxCameraZ2.zscope);
	//pDC->Rectangle(AxCameraZ3.zscope);
	//pDC->Rectangle(AxInspectZ.zscope);

	//GantryStone
	pDC->SelectObject(&m_brGantryStone);
	pDC->Rectangle(AxGantryX.scope.left - 250, AxGantryY.scope.top, AxGantryX.scope.left - 150, AxGantryY.scope.bottom);
	pDC->Rectangle(AxGantryX.scope.right + 150, AxGantryY.scope.top, AxGantryX.scope.right + 250, AxGantryY.scope.bottom);

	//UnloaderStone
	pDC->Rectangle(AxGantryX.scope.left - 140, AxUnloaderY.scope.top, AxGantryX.scope.left - 40, AxUnloaderY.scope.bottom);
	pDC->Rectangle(AxGantryX.scope.right + 40, AxUnloaderY.scope.top, AxGantryX.scope.right + 140, AxUnloaderY.scope.bottom);


	////======================장치 그리기==========================
	dy = -(AxGantryY.dpos * AxGantryY.dscale) + AxGantryY.yoffset - 40;		//Gantry_Y 좌표값
	n1 = AxGantryX.scope.left;
	n2 = AxGantryX.scope.right;

	//Cassette	
	pDC->SelectObject(&m_brCassette);
	pDC->Rectangle(AxCassetteZ.box);

	//Unloadstage	
	pDC->SetROP2(R2_XORPEN);
	pDC->SelectObject(&m_brUnloadstage);
	pDC->Rectangle(AxUnloadstageY.box);

	//Backlight X
	pDC->SelectObject(&m_brBackLightX);
	pDC->Rectangle(AxBackLightX.box.left, n1, AxBackLightX.box.right, n1);
	pDC->Rectangle(AxBackLightX.box);

	pDC->SetROP2(R2_COPYPEN);
	//InspectStage
	pDC->SelectObject(&m_brInspect);
	pDC->Rectangle(AxInspectY.box);

	//Loadport
	pDC->SelectObject(&m_brLoadport);
	pDC->Rectangle(AxLoadport.box);

	//Stretch
	pDC->SelectObject(&m_brStretch);
	
	dyL[0] = -(SharedInfo::GetCmdPos(AXIS_GRIPPER_PITCH_L1) * AxGantryY.dscale) + 200;	
	dyL[1] = -(SharedInfo::GetCmdPos(AXIS_GRIPPER_PITCH_L2) * AxGantryY.dscale) + 250;	
	dyL[2] = -(SharedInfo::GetCmdPos(AXIS_GRIPPER_PITCH_L3) * AxGantryY.dscale) + 300;	
	dyL[3] = -(SharedInfo::GetCmdPos(AXIS_GRIPPER_PITCH_L4) * AxGantryY.dscale) + 350;	
	dyL[4] = -(SharedInfo::GetCmdPos(AXIS_GRIPPER_PITCH_L5) * AxGantryY.dscale) + 400;
	dyL[5] = -(SharedInfo::GetCmdPos(AXIS_GRIPPER_PITCH_L6) * AxGantryY.dscale) + 450;
	dyL[6] = -(SharedInfo::GetCmdPos(AXIS_GRIPPER_PITCH_L7) * AxGantryY.dscale) + 500;
	dyL[7] = -(SharedInfo::GetCmdPos(AXIS_GRIPPER_PITCH_L8) * AxGantryY.dscale) + 550;

	dyR[0] = -(SharedInfo::GetCmdPos(AXIS_GRIPPER_PITCH_R1) * AxGantryY.dscale) + 200;
	dyR[1] = -(SharedInfo::GetCmdPos(AXIS_GRIPPER_PITCH_R2) * AxGantryY.dscale) + 250;
	dyR[2] = -(SharedInfo::GetCmdPos(AXIS_GRIPPER_PITCH_R3) * AxGantryY.dscale) + 300;
	dyR[3] = -(SharedInfo::GetCmdPos(AXIS_GRIPPER_PITCH_R4) * AxGantryY.dscale) + 350;
	dyR[4] = -(SharedInfo::GetCmdPos(AXIS_GRIPPER_PITCH_R5) * AxGantryY.dscale) + 400;
	dyR[5] = -(SharedInfo::GetCmdPos(AXIS_GRIPPER_PITCH_R6) * AxGantryY.dscale) + 450;
	dyR[6] = -(SharedInfo::GetCmdPos(AXIS_GRIPPER_PITCH_R7) * AxGantryY.dscale) + 500;
	dyR[7] = -(SharedInfo::GetCmdPos(AXIS_GRIPPER_PITCH_R8) * AxGantryY.dscale) + 550;

	for (i = 0; i<GRIPPER_ROW; i++)
	{
		AxStretchL[i].box.MoveToY(dyL[i]);
		AxStretchR[i].box.MoveToY(dyR[i]);

		pDC->Rectangle(AxStretchL[i].box);
		pDC->Rectangle(AxStretchR[i].box);
	}

	//Y축값
	pDC->SelectObject(&m_brGantryStone);

	//Gantry 이동에 맞춤	
	AxGantryY.box.MoveToY((int)dy);
	AxGantryX.box.MoveToY((int)dy);
	AxLoaderZ.box.MoveToY((int)dy + 180);
	AxCameraZ1.box.MoveToY((int)dy + 70);
	AxCameraZ2.box.MoveToY((int)dy - 70);
	//AxCameraZ3.box.MoveToY(int)dy - 130);

	AxCameraZ1.box.MoveToX(AxGantryX.box.left + 5);
	AxCameraZ2.box.MoveToX(AxGantryX.box.left + 5);
	//AxCameraZ3.box.MoveToX(AxGantryX.box.left + 5);

	//Stick  (각stage에 있을 때)
	pDC->SetROP2(R2_COPYPEN);
	dPosy[0] = (AxLoadport.box.top + AxLoadport.box.bottom) / 2 - 45;
	dPosy[1] = dy + 94;
	dPosy[2] = (AxInspectY.box.top + AxInspectY.box.bottom) / 2 - 150;
	dPosy[3] = (AxUnloaderY.box.top + AxUnloaderY.box.bottom) / 2 - 50;
	dPosy[4] = (AxUnloadstageY.box.top + AxUnloadstageY.box.bottom) / 2 - 45;
	//Total_Log(_T(" stick dPosy[0] = %.0f"), dPosy[0]);	
	pDC->SelectObject(&m_brStick);
	rect.SetRect(-600, -55, 600, 55);
	for (int i = 0; i < 5; i++) {
		if (strlen(pDlg->m_POSITION[i].STICKID) != 0) {
			rect.MoveToY((int)dPosy[i]);
			pDC->Rectangle(rect);
		}
	}

	//GantryStone X
	pDC->SelectObject(&m_brGantryY);
	pDC->Rectangle(AxGantryY.box);
	pDC->Rectangle(AxGantryX.box);

	//Loader //Gantry에 달려서 같이 움직인다.
	pDC->SelectObject(&m_brLoader);
	pDC->Rectangle(n1, (int)dy + 80, n1 + 40, (int)dy + 210);		//Loader-Left
	pDC->Rectangle(n2-40, (int)dy + 80, n2, (int)dy + 210);		//Loader-right
	pDC->Rectangle(n1, (int)dy + 120, n2, (int)dy + 170);			//Loader_X

	//Unloader	
	pDC->SelectObject(&m_brUnloader);
	pDC->Rectangle(n1, AxUnloaderY.box.top - 30, n1+40, AxUnloaderY.box.bottom + 30);	//Left
	pDC->Rectangle(n2-40, AxUnloaderY.box.top - 30,n2, AxUnloaderY.box.bottom + 30);	//right
	pDC->Rectangle(AxUnloaderY.box);

	////CAMERA
	pDC->SelectObject(&m_brCamOff);
	pDC->Rectangle(AxCameraZ1.box);
	pDC->Rectangle(AxCameraZ2.box);
	//pDC->Rectangle(AxCameraZ3.box);

	//3DCamera
	Ax3dX.box.left -= 650;
	Ax3dX.box.right -= 650;
	pDC->Rectangle(Ax3dX.box);
	Ax3dX.box.left += 650;
	Ax3dX.box.right += 650;

	//BoxCamera
	pDC->SelectObject(&m_brUnitBox);
	pDC->Rectangle(AxBoxCamLeftY.box);
	pDC->Rectangle(AxBoxCamRightY.box);	

	//Z-Bar
	pDC->SelectObject(&m_brUnitBox);
	pDC->Rectangle(AxLoaderZ.zbar);
	pDC->Rectangle(AxUnloaderZ.zbar);
	pDC->Rectangle(AxCassetteZ.zbar);
	pDC->Rectangle(AxCameraZ1.zbar);
	pDC->Rectangle(AxCameraZ2.zbar);
	//pDC->Rectangle(AxCameraZ3.zbar);
	//pDC->Rectangle(AxInspectZ.zbar);

	//-------------
	lbr.lbStyle = BS_SOLID;
	lbr.lbColor = RGB(0, 200, 9);
	lbr.lbHatch = 0;
	pen.CreatePen(PS_GEOMETRIC | PS_DOT, 3, &lbr, 0, 0);

	pDC->SelectObject(&pen);
	pDC->MoveTo(0, -m_nRealHeight / 2 + 100);					//0 = x 기구 움직이는 값
	pDC->LineTo(0, m_nRealHeight / 2 - 100);
	pDC->MoveTo(-m_nRealWidth / 4, AxGantryY.yoffset);			//0 = y 기구 움직이는 값
	pDC->LineTo(m_nRealWidth / 4, AxGantryY.yoffset);

	//============================================================
	pDC->SelectObject(&pen);
	pDC->SelectObject(m_Font);
	pDC->SetTextColor(RGB(200, 200, 200));
	pDC->SetBkMode(TRANSPARENT);

	sMsg.Format(_T("Ld"));		pDC->TextOutW(-1900, -900, sMsg);
	//sMsg.Format(_T("Iz"));		pDC->TextOutW(-1800, -900, sMsg);
	sMsg.Format(_T("Z1"));		pDC->TextOutW(-1700, -900, sMsg);
	sMsg.Format(_T("Z2"));		pDC->TextOutW(-1600, -900, sMsg);
	//sMsg.Format(_T("Z3"));		pDC->TextOutW(-1500, -900, sMsg);
	sMsg.Format(_T("Un"));		pDC->TextOutW(-1400, -900, sMsg);
	sMsg.Format(_T("Cst"));		pDC->TextOutW(-1300, -900, sMsg);

	sMsg.Format(_T("Tension-L : %4.2f %4.2f %4.2f %4.2f"), unitTension.TensionL[0], unitTension.TensionL[1], unitTension.TensionL[2], unitTension.TensionL[3]);
	pDC->TextOutW(1000, -900, sMsg);

	sMsg.Format(_T("Tension-R : %4.2f %4.2f %4.2f %4.2f"), unitTension.TensionR[0], unitTension.TensionR[1], unitTension.TensionR[2], unitTension.TensionR[3]);
	pDC->TextOutW(1000, -800, sMsg);

	sMsg.Format(_T("Stretch-L : %4.2f %4.2f %4.2f %4.2f"), unitStretch.StretchL[0], unitStretch.StretchL[1], unitStretch.StretchL[2], unitStretch.StretchL[3]);
	pDC->TextOutW(1000, -700, sMsg);

	sMsg.Format(_T("Stretch-R : %4.2f %4.2f %4.2f %4.2f"), unitStretch.StretchR[0], unitStretch.StretchR[1], unitStretch.StretchR[2], unitStretch.StretchR[3]);
	pDC->TextOutW(1000, -600, sMsg);

	sMsg.Format(_T("Pitch-L   : %4.1f %4.1f %4.1f %4.1f"), unitPitch.PitchL[0], unitPitch.PitchL[1], unitPitch.PitchL[2], unitPitch.PitchL[3]);
	pDC->TextOutW(1000, -500, sMsg);

	sMsg.Format(_T("Pitch-R   : %4.1f %4.1f %4.1f %4.1f"), unitPitch.PitchR[0], unitPitch.PitchR[1], unitPitch.PitchR[2], unitPitch.PitchR[3]);
	pDC->TextOutW(1000, -400, sMsg);

	sMsg.Format(_T("Clamp(1~4) L:  %s   %s   %s   %s"), unitClamp.ClampL[0], unitClamp.ClampL[1], unitClamp.ClampL[2], unitClamp.ClampL[3]);
	pDC->TextOutW(1000, -300, sMsg);
	sMsg.Format(_T("Clamp(5~8) L:  %s   %s   %s   %s"), unitClamp.ClampL[4], unitClamp.ClampL[5], unitClamp.ClampL[6], unitClamp.ClampL[7]);
	pDC->TextOutW(1000, -250, sMsg);

	sMsg.Format(_T("Clamp(1~4) R:  %s   %s   %s   %s"), unitClamp.ClampR[0], unitClamp.ClampR[1], unitClamp.ClampR[2], unitClamp.ClampR[3]);
	pDC->TextOutW(1000, -200, sMsg);
	sMsg.Format(_T("Clamp(5~8) R:  %s   %s   %s   %s"), unitClamp.ClampR[4], unitClamp.ClampR[5], unitClamp.ClampR[6], unitClamp.ClampR[7]);
	pDC->TextOutW(1000, -150, sMsg);

	sMsg.Format(_T("Gantry-X  : %10.3f"), AxGantryX.dpos);			pDC->TextOutW(1200, -100, sMsg);
	sMsg.Format(_T("Gantry-Y  : %10.3f"), AxGantryY.dpos);			pDC->TextOutW(1200, 0, sMsg);
	sMsg.Format(_T("BoxCam-L  : %10.3f"), AxBoxCamLeftY.dpos);			pDC->TextOutW(1200, 100, sMsg);
	sMsg.Format(_T("BoxCam-R  : %10.3f"), AxBoxCamRightY.dpos);		pDC->TextOutW(1200, 200, sMsg);
	sMsg.Format(_T("Loader-Z  : %10.3f"), AxLoaderZ.dpos);			pDC->TextOutW(1200, 300, sMsg);
	//sMsg.Format(_T("Inspect-Y : %10.3f"), AxInspectY.dpos);			pDC->TextOutW(1200, 300, sMsg);
	//sMsg.Format(_T("Inspect-Z : %10.3f"), AxInspectZ.dpos);			pDC->TextOutW(1200, 300, sMsg);	
	sMsg.Format(_T("Unloader-Y: %10.3f"), AxUnloaderY.dpos);		pDC->TextOutW(1200, 400, sMsg);
	sMsg.Format(_T("Unloader-Z: %10.3f"), AxUnloaderZ.dpos);		pDC->TextOutW(1200, 500, sMsg);
	sMsg.Format(_T("Cassette-Z: %10.3f"), AxCassetteZ.dpos);		pDC->TextOutW(1200, 600, sMsg);
	sMsg.Format(_T("Camera-Z1 : %10.3f"), AxCameraZ1.dpos);			pDC->TextOutW(1200, 700, sMsg);
	sMsg.Format(_T("Camera-Z2 : %10.3f"), AxCameraZ2.dpos);			pDC->TextOutW(1200, 800, sMsg);
	//sMsg.Format(_T("Camera-Z3 : %10.3f"), AxCameraZ3.dpos);			pDC->TextOutW(1200, 900, sMsg);
	
	if (AxTrayBox.dpos < 1.0)
	{
		sMsg.Format(_T("TrayBox   :    BOX_OFF"));					pDC->TextOutW(-1900, -300, sMsg);
	}
	else
	{
		sMsg.Format(_T("TrayBox   :     BOX_ON"));					pDC->TextOutW(-1900, -300, sMsg);
	}

	//sMsg.Format(_T("Buffer    : %10.3f"), AxUnloadstageY.dpos);		pDC->TextOutW(-1900, -200, sMsg);
	if (AxUnloadstageY.dpos < 1.0)
	{
		sMsg.Format(_T("Buffer-CYL:    FORWARD"));						pDC->TextOutW(-1900, -200, sMsg);
	}
	else
	{
		sMsg.Format(_T("Buffer-CYL:   BACKWARD"));					pDC->TextOutW(-1900, -200, sMsg);
	}

	sMsg.Format(_T("3DCamera-X: %10.3f"), Ax3dX.dpos);				pDC->TextOutW(-1900, 0, sMsg);
	//sMsg.Format(_T("Inspect-Y : %10.3f"), AxInspectY.dpos);			pDC->TextOutW(-1900, 100, sMsg);
	//sMsg.Format(_T("Inspect-Z : %10.3f"), AxInspectZ.dpos);			pDC->TextOutW(-1900, 200, sMsg);	
	sMsg.Format(_T("InspUvw-X : %10.3f"), AxInspectuvw.upos);		pDC->TextOutW(-1900, 300, sMsg);
	sMsg.Format(_T("InspUvw-Y1 : %10.3f"), AxInspectuvw.vpos);		pDC->TextOutW(-1900, 400, sMsg);
	sMsg.Format(_T("InspUvw-Y2 : %10.3f"), AxInspectuvw.wpos);		pDC->TextOutW(-1900, 500, sMsg);
	sMsg.Format(_T("BoxUvw-X1  : %10.3f"), AxBoxuvw.upos);			pDC->TextOutW(-1900, 600, sMsg);
	sMsg.Format(_T("BoxUvw-X2  : %10.3f"), AxBoxuvw.vpos);			pDC->TextOutW(-1900, 700, sMsg);
	sMsg.Format(_T("BoxUvw-Y  : %10.3f"), AxBoxuvw.wpos);			pDC->TextOutW(-1900, 800, sMsg);
	sMsg.Format(_T("BackLt-X  : %10.3f"), AxBackLightX.dpos);			pDC->TextOutW(-1900, 900, sMsg);


	
	
	//============================================================

	pDC->SelectObject(poldFont);
	pDC->SelectObject(poldPen);
	pDC->SelectObject(poldBrush);
}


void CVisionAgentSimulationViewDlg::Draw_Picture()
{
	CClientDC dc(this);
	CBitmap mBitmap;
	CRect rc;
	CDC mMemDC;
	CDC* pDC = &dc;

	//Total_Log(_T("--Draw_Picture()--"));

	GetClientRect(&rc);
	mMemDC.CreateCompatibleDC(pDC);
	mBitmap.CreateCompatibleBitmap(pDC, rc.Width(), rc.Height());
	mMemDC.SelectObject(&mBitmap);

	SetMapMode(mMemDC, MM_ANISOTROPIC);							//XY축단위 가변형으로
	mMemDC.SetWindowExt(m_nRealWidth, m_nRealHeight);			//논리좌표상 화면크기설정
	mMemDC.SetViewportExt(rc.Width(), rc.Height());				//논리좌표와 매칭할 뷰포트화면크기
	mMemDC.SetViewportOrg(rc.Width() / 2, (rc.Height() / 2));	//0점위치변경

	pDC->SetMapMode(MM_ANISOTROPIC);
	pDC->SetWindowExt(m_nRealWidth, m_nRealHeight);
	pDC->SetViewportExt(rc.Width(), rc.Height());
	pDC->SetViewportOrg(rc.Width() / 2, (rc.Height() / 2));

	CRect rcDraw(-m_nRealWidth / 2, -m_nRealHeight / 2, m_nRealWidth / 2, m_nRealHeight / 2);	//화면논리좌표
	//----------------------

	Get_UnitPosition();		//좌표값 가저오기

	Draw_Unit(&mMemDC);		//화면에 그리기

	pDC->BitBlt(rcDraw.left, rcDraw.top, rcDraw.Width(), rcDraw.Height(), &mMemDC, rcDraw.left, rcDraw.top, SRCCOPY);

	mMemDC.DeleteDC();
}

