#ifndef _COMMON_DEFINE_H_
#define _COMMON_DEFINE_H_

//#define GRIPPER_8
//#define GRIPPER_0


#define XML_USE					1

#define STICK_FLIP_XY			(1) //KJT 20210316 //1 Or -1 //1:Stick ID Left, -1:Stick ID Right

#define UVW_MOVE_TYPE			1 //KJT 20210322 //1:IQC, 0:FMM

#define CIM_SKIP_MODE			1 //KJT 20210416

#define MAX_TP_COUNT			1000//12 //KJT 20210329
#define MAX_3D_HOLE_COUNT		1000//12 //KJT 20210329
#define MAX_FLATNESS_COUNT		1000

#define SIMULATION_VIEW_USE_SIMULATIONVIEWDLG_STUDIOMAP 1 //0:SimulationViewDlg, 1:StudipMap

#define MAX_RECIPE_COUNT		1000

#define MAX_PPA_NUM				25

#define MAX_AUTO_DELETE_DIR_PATH 3 //KJT 20210329

#define __max(a, b)	(((a) > (b)) ? (a) : (b))
#define __min(a, b)	(((a) < (b)) ? (a) : (b))

//Set Time-Out
#define TIME_OUT_CYLINDER		(30 * 1000)		// mse
#define TIME_OUT_VAC			(10 * 1000)		//msec
#define TIME_OUT_MOTION			(3 * 60 * 1000)	// msec
#define TIME_OUT_FORCE_CONTROL	(20 * 60 * 1000)// msec
#define TIME_OUT_DUAL			(60 * 60 * 1000)// msec
#define TIME_OUT_STATE			(1 * 60 * 1000)	// msec 5Min.
#define TIME_OUT_WELDING		(1 * 20 * 1000)	// msec
#define TIME_OUT_MOTION_X		(1 * 60 * 1000)	// msec
#define TIME_OUT_COMUNICATION	(3  * 1000)		// msec
#define TIME_OUT_PROCESSING		(5 * 1000)		//msec

#define PC_COM_AJIN_MOTION_DELAY 20//msec

#define TIME_OUT_MAPPING		(48 * 60 * 60 * 1000)	// msec
#define TIME_OUT_PULSE			(3  * 100)	// msec
#define TIME_OUT_DELAY			(30*1000)	//msec

#define TIME_OUT_LOADING_DELAY	(15*1000)	//msec
#define TIME_OUT_ROBOT_INTERFACE (10 * 60 * 1000)	// msec

#define TIME_OUT_STRETCH_ZERO	(1  * 1000) //(5  * 1000)		// msec
#define TIME_OUT_STRETCH		(1 * 15 * 1000)		// msec
#define TIME_OUT_ORIGIN			(2 * 60 * 1000)		// msec
#define TIME_OUT_STANDBY		TIME_OUT_MOTION		//( 1 * 60 * 1000)   // msec
#define TIME_OUT_UNCLAMP		(1 * 5 * 1000)		// msec

#define SIM_VISION_RESULT 1000

#define CLAMP_OFF_DELAY				1000
#define IMAGE_FOCUS_DELAY			500
#define AIR_FLOATING_STOP_DELAY		2000

#define _3D_CAM_RESOLUTION_X 0.0004411764705882353
#define _3D_CAM_RESOLUTION_Y 0.0004545454545454545

#define PI				3.14159265358979323846264338
#define TO_RADIAN		(PI / 180.0)
#define TO_DEGREE		(180.0 / PI)
#define LASER_FOCUS_VEL	100
#define REVERSE			-1

#define UMAC_CONTROL_AXIS					0
#define UMAC_VERTUAL						1	
#define UMAC_REAL_AXIS						2
#define UMAC_PLC_NO							3
#define UMAC_HOME_NO						4
#define UMAC_HOME_NO_SLAVE					5
#define UMAC_RESOLUTION						6

#define	Use									1
#define NoUse								-1

#define COM_BUF_SIZE 10000

#define MAX_FRAME_FLATNESS_POINTS_NUM 100

#define MAX_MOTOR_NUM	52

#define MAX_STICK_NUM	100
#define MAX_WELDING_NUM 100
#define	MAX_CELL_X_COUNT 9
#define MAX_CELL_Y_COUNT 9

#define MAX_PAT_X_NUM	5
#define MAX_PAT_Y_NUM	5

#define MAX_WELDING_SCHEDULE_COUNT	32
#define MAX_WELDING_METHOD2_COUNT	32
#define MAX_SUB_WELDING_COUNT		32
///////////////////////////////////////////////////

#define _TAB_ITEM_SIZE_X	120
#define _TAB_ITEM_SIZE_Y	40

#define MAX_LIST_DATA_NUM	50

#define	GRIPPER_ROW			3//5
#define CELL_X_COUNT_MAX	6
#define CELL_Y_COUNT_MAX	1
#define STRETCH_STEP_MAX	30
//#define MAX_DINPUT_SIZE 192
//#define MAX_DOUTPUT_SIZE 128
#define MAX_DOUTPUT_DWORD_SIZE	6
#define MAX_DINPUT_DWORD_SIZE	6
//#define MAX_AINPUT_SIZE		64
//#define MAX_AOUTPUT_SIZE		16
#define MAX_VISION_AXIS_SIZE	3
#define MAX_STICK_COUNT_IN_BOX	10
#define MAX_CST_FLOOR			4 //6
#define MAX_CST_SLOT			1 //5
//#define MAX_STRETCH_AXIS_SIZE		16
#define MAX_COUNTER_FORCE_AXIS_SIZE	2
#define MAX_CF_NUM					6
#define MAX_CENTERING_NUM			4

#ifdef GRIPPER_8
#define MAX_SF_NUM					16
#else
#define MAX_SF_NUM					6
#endif

// owk : ÃàÁ¦¾î Å¸ÀÔÀ» ±¸ºÐ
#define AXIS_TYPE_DIRECT_AJIN	0			
#define AXIS_TYPE_REMOTE_UMAC	1
#define AXIS_TYPE_REMOTE_AJIN	2

#define DIO_MODULE_SIZE		32
#define AI_MODULE_SIZE		16
#define DI_MODULE_CNT		7
#define DO_MODULE_CNT		4
#define AI_MODULE_CNT		4

#define POSITION_COUNT		5		//Æ÷Áö¼Ç °¹¼ö

#define	MAX_GAP_SENSOR		6
#define	MAX_AIR_REGULATOR	6

#define AOI_SERVER_PORT		2100
#define AOI_SERVER_IP		_T("192.168.2.100")

#define AOI_LIGHT_CH_COUNT	12
#define BACKLIGHT_CH_COUNT	11//21.02.16 sjc 9->7
#define AOI_MAX_LINE_COUNT	10
#define BACKLIGHT_OFF_VALUE 5//sunghaklee("0"일때 Backlight가 꺼지지 않음)

#define MAIN_TEMPERATURE_NO 4

//#define COM_PORT_MLC_LIGHT 1
//#define COM_PORT_LIGHT_8CH 2
//#define COM_PORT_LIGHT_12CH 3
#define COM_PORT_TEMPER			17//210720 JINI comport 17(moxa 6) change
#define COM_PORT_LASER_FOCUS	_T("COM18")//210720 JINI comport 18(moxa 7) change
//21.02.16 sjc
//#define COM_PORT_REVIEW_LIGHT	20
//#define COM_PORT_AOI_LIGHT		21
#define COM_PORT_LOADER_LIGHT	16
#define COM_PORT_BACK_LIGHT		14
//21.02.22 sjc
#define	COM_PORT_ZOOM_COAXIAL	8
#define	COM_PORT_ZOOM_RING		9
//21.03.02 sjc
#define COM_PORT_NAVMOTOR		11
//
#define COM_PORT_LLC_LENS		12
#define COM_PORT_LLC_ATF		13

#define COM_PORT_AOI_LASER_FOCUS 15//21.04.03 sjc comport 15(moxa 8)

#define COM_PORT_ESC			11//21.04.09 sjc moxa 4

#define MAX_REPEAT_COUNT		1000
#define MAX_REPEAT_HOLE_COUNT	1000

#define MAX_CAMERA_CAL_COUNT 1000

#define MAX_HALF_EDGE_REPEAT_COUNT	1000

#define MAX_LENGTH_BOX_CST_ID 20
#define MAX_LENGTH_STICK_ID 20
#define MAX_LENGTH_OPERATOR_ID 20

//jini 20210720
enum
{
	_STORAGE_GLASE_REVIEW = 0,
	_STORAGE_REPEAT_REVIEW,

	_STORAGE_MAX
};

const TCHAR* const StoragePath[] =
{

	_T("GlassReview"),
	_T("RepeatReview"),

};

//sunghaklee(2021.02.25)
enum eCamSwap_Mode
{
	_eCam_Swap_None = 0,
	_eCam_Swap_PreAlignToReview,
	_eCam_Swap_ReviewToPreAlign,

	_eCam_Swap_Review10XToReview20X,
	_eCam_Swap_Review20XToReview10X,

	_eCam_Swap_Review10XToReview50X,
	_eCam_Swap_Review50XToReview10X,

	_eCam_Swap_Review20XToPreAlign,
	_eCam_Swap_ReviewPreAlignTo20X,

	_eCam_Swap_Review20XTo50X,
	_eCam_Swap_Review50XTo20X,

	_eCam_Swap_PreAlignToReview50X,
	_eCam_Swap_Review50XToPreAlign,

	//_eCam_Swap_Review10XToPreAlignZoom,
	//_eCam_Swap_PreAlignZoomToReview10X,
	//_eCam_Swap_Review10XTo3D,
	//_eCam_Swap_3DToReview10X,
	//_eCam_Swap_Review10XToAOI,
	//_eCam_Swap_AOIToReview10X,
	//_eCam_Swap_PreAlignZoomToAOI,
	//_eCam_Swap_AOIToPreAlignZoom,
};

enum eAlign_Mode
{
	_eHorizontal_Align_Mode = 0,
	_eVertical_Align_Mode,
	_e4Point_Align_Mode
};

enum eGripper_Clamp_Mode
{
	_eCLAMP_FIRST = 0,
	_eCLAMP_SECOND,
	_eCLAMP_ALL
};

enum MOTION_MODE
{
	eMOTION_ABS = 0,
	eMOTION_REL,
	eMOTION_VEL,
	eMOTION_MAX,
};

enum
{
	CCD_SELECT_L = 0,
	CCD_SELECT_R = 1
};

enum //KJT 2020812
{
	_STRETCHER_1 = 0,
	_STRETCHER_2 = 1,
	//_CONTER_FORCE = 2, 
	//_CENTERING_FORCE_X = 3,
	//_CENTERING_FORCE_Y = 4,
	_MAX_CONTROL_NUM
};

enum
{
	_CompBaseData = 0,
	_CompOffset = 1,
	_SfMaxCompData
};

enum
{
	_FrameUnit = 0,
	_GripperUnit = 1,
	_SfMaxUnit
};

typedef enum
{
	AXIS_NONE = -1,

	AXIS_GANTRY_Y1 = 0, //Y1
	AXIS_GANTRY_Y2,		//Y2
	AXIS_CAMERA_Z1,
	AXIS_CAMERA_Z2,
	AXIS_GANTRY_X, //WORK_STAGE_X,
	AXIS_FRAME_Z1,
	AXIS_FRAME_Z2,
	AXIS_FRAME_Z3,
	AXIS_FRAME_Z4,
	AXIS_GLASS_UVW_Y1,
	AXIS_GLASS_UVW_Y2,
	AXIS_GLASS_UVW_X1,
	AXIS_GLASS_UVW_X2,
	AXIS_POP_UP_Z,
	AXIS_FRAME_GRIPPER_SHORT_L,
	AXIS_FRAME_GRIPPER_SHORT_R,
	AXIS_FRAME_GRIPPER_LONG_L1,
	AXIS_FRAME_GRIPPER_LONG_L2,
	AXIS_FRAME_GRIPPER_LONG_R1,
	AXIS_FRAME_GRIPPER_LONG_R2,

	AXIS_GLASS_RELEASE_SHORT_Z1,
	AXIS_GLASS_RELEASE_SHORT_Z2,
	AXIS_GLASS_RELEASE_SHORT_Z3,
	AXIS_GLASS_RELEASE_SHORT_Z4,
	AXIS_GLASS_RELEASE_SHORT_Z5,

	AXIS_GLASS_RELEASE_SHORT_FWD_L,
	AXIS_GLASS_RELEASE_SHORT_FWD_R,

	AXIS_GLASS_RELEASE_LONG_L_Z1,
	AXIS_GLASS_RELEASE_LONG_L_Z2,
	AXIS_GLASS_RELEASE_LONG_L_Z3,
	AXIS_GLASS_RELEASE_LONG_L_Z4,
	AXIS_GLASS_RELEASE_LONG_L_Z5,
	AXIS_GLASS_RELEASE_LONG_L_Z6,
	AXIS_GLASS_RELEASE_LONG_L_Z7,
	AXIS_GLASS_RELEASE_LONG_L_Z8,

	AXIS_GLASS_RELEASE_LONG_FWD_L1,
	AXIS_GLASS_RELEASE_LONG_FWD_L2,
	AXIS_GLASS_RELEASE_LONG_FWD_R1,
	AXIS_GLASS_RELEASE_LONG_FWD_R2,

	AXIS_FRAME_TRANSFER_X1,
	AXIS_FRAME_TRANSFER_X2,

	AXIS_ROLLER_RELEASE_FRONT_L,
	AXIS_ROLLER_RELEASE_FRONT_R,
	AXIS_ROLLER_RELEASE_REAR_L,
	AXIS_ROLLER_RELEASE_REAR_R,

	AXIS_GLASS_RELEASE_LONG_R_Z1,
	AXIS_GLASS_RELEASE_LONG_R_Z2,
	AXIS_GLASS_RELEASE_LONG_R_Z3,
	AXIS_GLASS_RELEASE_LONG_R_Z4,
	AXIS_GLASS_RELEASE_LONG_R_Z5,
	AXIS_GLASS_RELEASE_LONG_R_Z6,
	AXIS_GLASS_RELEASE_LONG_R_Z7,
	AXIS_GLASS_RELEASE_LONG_R_Z8,

	AXIS_ROLLER_RELEASE_FRONT_L_Z,
	AXIS_ROLLER_RELEASE_FRONT_R_Z,
	AXIS_ROLLER_RELEASE_REAR_L_Z,
	AXIS_ROLLER_RELEASE_REAR_R_Z,

	AXIS_CLEANING_UNIT_Z1,
	AXIS_CLEANING_UNIT_Z2,
	AXIS_FRAME_TRANSFER_L,

	AXIS_MAX,

	//Temp
	DIRECT_AXIS_CAMERA_Z1,
}enum_Axis;

typedef enum
{
	DIRECT_AXIS_NONE = -1,

	DIRECT_AXIS_TEMP = 0, //Temp

	DIRECT_AXIS_MAX
}enum_DIRECT_AXIS;

typedef enum
{
	REMOTE_AXIS_UMAC_NONE = -1,

	REMOTE_AXIS_UMAC_GANTRY_Y1 = 0, //Y1
	REMOTE_AXIS_UMAC_GANTRY_Y2,	   //Y2
	REMOTE_AXIS_UMAC_GANTRY_X,

	REMOTE_AXIS_UMAC_MAX
}enum_REMOTE_AXIS_UMAC;

typedef enum
{
	REMOTE_AXIS_NONE = -1,

	REMOTE_AXIS_GANTRY_Y1 = 0, //Y1
	REMOTE_AXIS_GANTRY_Y2,		//Y2
	REMOTE_AXIS_CAMERA_Z1,
	REMOTE_AXIS_CAMERA_Z2,
	REMOTE_AXIS_GANTRY_X, //WORK_STAGE_X,
	REMOTE_AXIS_FRAME_Z1,
	REMOTE_AXIS_FRAME_Z2,
	REMOTE_AXIS_FRAME_Z3,
	REMOTE_AXIS_FRAME_Z4,
	REMOTE_AXIS_GLASS_UVW_Y1,
	REMOTE_AXIS_GLASS_UVW_Y2,
	REMOTE_AXIS_GLASS_UVW_X1,
	REMOTE_AXIS_GLASS_UVW_X2,
	REMOTE_AXIS_POP_UP_Z,
	REMOTE_AXIS_FRAME_GRIPPER_SHORT_L,
	REMOTE_AXIS_FRAME_GRIPPER_SHORT_R,
	REMOTE_AXIS_FRAME_GRIPPER_LONG_L1,
	REMOTE_AXIS_FRAME_GRIPPER_LONG_L2,
	REMOTE_AXIS_FRAME_GRIPPER_LONG_R1,
	REMOTE_AXIS_FRAME_GRIPPER_LONG_R2,
	REMOTE_AXIS_GLASS_RELEASE_SHORT_Z1,
	REMOTE_AXIS_GLASS_RELEASE_SHORT_Z2,
	REMOTE_AXIS_GLASS_RELEASE_SHORT_Z3,
	REMOTE_AXIS_GLASS_RELEASE_SHORT_Z4,
	REMOTE_AXIS_GLASS_RELEASE_SHORT_Z5,

	REMOTE_AXIS_GLASS_RELEASE_SHORT_FWD_L,
	REMOTE_AXIS_GLASS_RELEASE_SHORT_FWD_R,
	REMOTE_AXIS_GLASS_RELEASE_LONG_L_Z1,
	REMOTE_AXIS_GLASS_RELEASE_LONG_L_Z2,
	REMOTE_AXIS_GLASS_RELEASE_LONG_L_Z3,
	REMOTE_AXIS_GLASS_RELEASE_LONG_L_Z4,
	REMOTE_AXIS_GLASS_RELEASE_LONG_L_Z5,
	REMOTE_AXIS_GLASS_RELEASE_LONG_L_Z6,
	REMOTE_AXIS_GLASS_RELEASE_LONG_L_Z7,
	REMOTE_AXIS_GLASS_RELEASE_LONG_L_Z8,
	REMOTE_AXIS_GLASS_RELEASE_LONG_FWD_L1,
	REMOTE_AXIS_GLASS_RELEASE_LONG_FWD_L2,
	REMOTE_AXIS_GLASS_RELEASE_LONG_FWD_R1,
	REMOTE_AXIS_GLASS_RELEASE_LONG_FWD_R2,
	REMOTE_AXIS_FRAME_TRANSFER_X1,
	REMOTE_AXIS_FRAME_TRANSFER_X2,

	REMOTE_AXIS_ROLLER_RELEASE_FRONT_L,
	REMOTE_AXIS_ROLLER_RELEASE_FRONT_R,
	REMOTE_AXIS_ROLLER_RELEASE_REAR_L,
	REMOTE_AXIS_ROLLER_RELEASE_REAR_R,
	REMOTE_AXIS_GLASS_RELEASE_LONG_R_Z1,
	REMOTE_AXIS_GLASS_RELEASE_LONG_R_Z2,
	REMOTE_AXIS_GLASS_RELEASE_LONG_R_Z3,
	REMOTE_AXIS_GLASS_RELEASE_LONG_R_Z4,
	REMOTE_AXIS_GLASS_RELEASE_LONG_R_Z5,
	REMOTE_AXIS_GLASS_RELEASE_LONG_R_Z6,
	REMOTE_AXIS_GLASS_RELEASE_LONG_R_Z7,
	REMOTE_AXIS_GLASS_RELEASE_LONG_R_Z8,
	REMOTE_AXIS_ROLLER_RELEASE_FRONT_L_Z,
	REMOTE_AXIS_ROLLER_RELEASE_FRONT_R_Z,
	REMOTE_AXIS_ROLLER_RELEASE_REAR_L_Z,
	REMOTE_AXIS_ROLLER_RELEASE_REAR_R_Z,

	REMOTE_AXIS_CLEANING_UNIT_Z1,
	REMOTE_AXIS_CLEANING_UNIT_Z2,
	REMOTE_AXIS_FRAME_TRANSFER_L,

	REMOTE_AXIS_MAX,
}enum_REMOTE_AXIS;

typedef enum
{
	eGRIPPER_ROW1 = 0,
	eGRIPPER_ROW2,
	eGRIPPER_ROW3,
	//eGRIPPER_ROW4,
	//eGRIPPER_ROW5,
#ifdef GRIPPER_8
	eGRIPPER_ROW6,
	eGRIPPER_ROW7,
	eGRIPPER_ROW8,
#endif

	eGRIPPER_ROW_MAX,
}enum_eGRIPPER_ROW;


typedef enum
{
	REMOTE_UMAC_GNATRY_YL = 0,
	REMOTE_UMAC_GANTRY_YR,
	REMOTE_UMAC_GANTRY_X,
	REMOTE_UMAC_GANTRY_VIRTUAL_Y,

	REMOTE_UMAC_GANTRY_MAX,
}enum_REMOTE_UMAC_AXIS;

//DINPUT
typedef enum // KTY 20210907
{
	_DIN_UCP05_SMPS_01_MAIN_POWER,
	_DIN_UCP06_SMPS_02_SAFETY_POWER,
	_DIN_UCP07_SMPS_03_BRAKE_POWER,
	_DIN_UCP08_SMPS_04_CAMERA_DC_POWER_12V,

	_DIN_UCP05_1_IO_DC_24V_POWER_AND_MODLUE,
	_DIN_UPC05_2_FAN_AND_LC_INDICATOR_DC_POWER,
	_DIN_UPC06_1_SAFETY_DC_POWER,
	_DIN_UPC07_1_BRAKE_DC_POWER,
	_DIN_UPC08_1_CAMERA_DC_POWER_12V,

	_DIN_UCP09_SMPS_05_CAMERA_DC_POWER_5V,
	_DIN_UCP09_1_CAMERA_DC_POWER_5V,
	_DIN_11,
	_DIN_12,
	_DIN_POWER_LINE_CP,
	_DIN_14,
	_DIN_TEMP_ALARM,
	_DIN_MUTE_SW_ON,
	_DIN_SERVO_AC_POWER_MC_CP,
	_DIN_LODING_MS_POWER,
	_DIN_19,
	_DIN_ELCB_01_UPS_POWER_ELB_PC_AND_MONITOR_POWER,
	_DIN_ELCB_02_PC_CONCENT_POWER,
	_DIN_ELCB_03_DC_POWER_LINE,
	_DIN_ELCB_10_GPS_EXCEPTION_CIRCUIT,
	_DIN_ELCB_11_CONTROL_AC_220V_POWER,
	_DIN_25,
	_DIN_26,
	_DIN_ELCB_14_AIRDRAIN_AC_220V_POWER,
	_DIN_28,
	_DIN_29,
	_DIN_MAIN_MC1_ON,
	_DIN_MAIN_MC2_ON, // INDEX 31

	_DIN_ELCB_20_SMD01_SMD03, // INDEX 100
	_DIN_ELCB_21_SMD04_SMD06,
	_DIN_ELCB_22_SMD07_SMD09,
	_DIN_ELCB_23_SMD10_SMD11,
	_DIN_ELCB_24_SMD12_SMD15,
	_DIN_ELCB_25_SMD16_SMD19,
	_DIN_ELCB_26_SMD20_SMD22,
	_DIN_ELCB_27_SMD23_SMD25,
	_DIN_ELCB_28_SMD26_SMD31,
	_DIN_ELCB_29_SMD32_SMD34,
	_DIN_ELCB_30_SMD35_SMD37,
	_DIN_111,
	_DIN_112,
	_DIN_MC20_ON_SIGNAL,
	_DIN_MC21_ON_SIGNAL,
	_DIN_MC22_ON_SIGNAL,
	_DIN_MC23_ON_SIGNAL,
	_DIN_MC24_ON_SIGNAL,
	_DIN_MC25_ON_SIGNAL,
	_DIN_MC26_ON_SIGNAL,
	_DIN_MC27_ON_SIGNAL,
	_DIN_MC28_ON_SIGNAL,
	_DIN_MC29_ON_SIGNAL,
	_DIN_MC30_ON_SIGNAL,
	_DIN_EMO_1_ON,
	_DIN_EMO_2_ON,
	_DIN_EMO_3_ON,
	_DIN_EMO_4_ON,
	_DIN_EMS_1_ON,
	_DIN_EMS_2_ON,
	_DIN_130,
	_DIN_131,

	_DIN_GRIPPER_L1_OPEN_DETECT_SENSOR1, // INDEX 200
	_DIN_GRIPPER_L1_CLOSE_DETECT_SENSOR1,
	_DIN_GRIPPER_L2_OPEN_DETECT_SENSOR1,
	_DIN_GRIPPER_L2_CLOSE_DETECT_SENSOR1,
	_DIN_GRIPPER_L3_OPEN_DETECT_SENSOR1,
	_DIN_GRIPPER_L3_CLOSE_DETECT_SENSOR1,
	_DIN_GRIPPER_R1_OPEN_DETECT_SENSOR1,
	_DIN_GRIPPER_R1_CLOSE_DETECT_SENSOR1,
	_DIN_GRIPPER_R2_OPEN_DETECT_SENSOR1,
	_DIN_GRIPPER_R2_CLOSE_DETECT_SENSOR1,
	_DIN_GRIPPER_R3_OPEN_DETECT_SENSOR1,
	_DIN_GRIPPER_R3_CLOSE_DETECT_SENSOR1,
	_DIN_212,
	_DIN_213,
	_DIN_214,
	_DIN_215,
	_DIN_216,
	_DIN_217,
	_DIN_218,
	_DIN_219,
	_DIN_DOOR_1_OPEN,
	_DIN_DOOR_2_OPEN,
	_DIN_DOOR_3_OPEN,
	_DIN_DOOR_4_OPEN,
	_DIN_EFU_01_ALARM,
	_DIN_EFU_02_ALARM,
	_DIN_EFU_03_ALARM,
	_DIN_EFU_04_ALARM,
	_DIN_EFU_05_ALARM,
	_DIN_EFU_06_ALARM,
	_DIN_230,
	_DIN_231,

	_DIN_300, // INDEX 300
	_DIN_301,
	_DIN_302,
	_DIN_303,
	_DIN_304,
	_DIN_305,
	_DIN_306,
	_DIN_PICK_UP_UNIT_FWD,
	_DIN_PICK_UP_UNIT_BWD,
	_DIN_PICK_UP_UNIT_CLAMP,
	_DIN_PICK_UP_UNIT_UNCLAMP,
	_DIN_MAGAZINE_EXISTENCE_DETECT_01,
	_DIN_MAGAZINE_SAFETY_POSITION_CONFIRM_02,
	_DIN_313,
	_DIN_314,
	_DIN_315,
	_DIN_316,
	_DIN_317,
	_DIN_318,
	_DIN_319,
	_DIN_320,
	_DIN_AIR_DRYER_01_ALARM_FULT,
	_DIN_AIR_DRYER_01_OPERATION,
	_DIN_AIR_DRYER_02_ALARM_FULT,
	_DIN_AIR_DRYER_02_OPERATION,
	_DIN_325,
	_DIN_326,
	_DIN_327,
	_DIN_328,
	_DIN_329,
	_DIN_330,
	_DIN_331,

	_DIN_MAIN_AIR_PRESSURE, // INDEX 400
	_DIN_SUPPLY_PRESSURE,
	_DIN_GANTRY_X_AXIS_01_PRESSURE,
	_DIN_GANTRY_X_AXIS_02_PRESSURE,
	_DIN_GANTRY_Y_AXIS_01_PRESSURE,
	_DIN_GANTRY_Y_AXIS_02_PRESSURE,
	_DIN_406, // 
	_DIN_ISOLATOR_01_PRESSURE_ACT_H,
	_DIN_ISOLATOR_02_PRESSURE_ACT_V,
	_DIN_409,
	_DIN_410,
	_DIN_411,
	_DIN_412,
	_DIN_413,
	_DIN_414,
	_DIN_415,
	_DIN_416,
	_DIN_417,
	_DIN_418,
	_DIN_419,
	_DIN_420,
	_DIN_421,
	_DIN_422,
	_DIN_423,
	_DIN_424,
	_DIN_425,
	_DIN_426,
	_DIN_427,
	_DIN_428,
	_DIN_429,
	_DIN_430,
	_DIN_431,

	_DIN_IN_TRANSFER_MASK_VAC_PAD_01_INPUT, // INDEX 500
	_DIN_IN_TRANSFER_MASK_VAC_PAD_02_INPUT,
	_DIN_IN_TRANSFER_MASK_VAC_PAD_03_INPUT,
	_DIN_IN_TRANSFER_MASK_VAC_PAD_04_INPUT,
	_DIN_IN_TRANSFER_MASK_VAC_PAD_05_INPUT,
	_DIN_IN_TRANSFER_MASK_VAC_PAD_06_INPUT,
	_DIN_IN_TRANSFER_MASK_VAC_PAD_07_INPUT,
	_DIN_IN_TRANSFER_MASK_VAC_PAD_08_INPUT,
	_DIN_OUT_TRANSFER_MASK_VAC_PAD_01_INPUT,
	_DIN_OUT_TRANSFER_MASK_VAC_PAD_02_INPUT,
	_DIN_OUT_TRANSFER_MASK_VAC_PAD_03_INPUT,
	_DIN_OUT_TRANSFER_MASK_VAC_PAD_04_INPUT,
	_DIN_OUT_TRANSFER_MASK_VAC_PAD_05_INPUT,
	_DIN_OUT_TRANSFER_MASK_VAC_PAD_06_INPUT,
	_DIN_OUT_TRANSFER_MASK_VAC_PAD_07_INPUT,
	_DIN_OUT_TRANSFER_MASK_VAC_PAD_08_INPUT,
	_DIN_516,
	_DIN_517,
	_DIN_518,
	_DIN_519,
	_DIN_520,
	_DIN_521,
	_DIN_522,
	_DIN_523,
	_DIN_524,
	_DIN_525,
	_DIN_526,
	_DIN_527,
	_DIN_528,
	_DIN_529,
	_DIN_530,
	_DIN_531,

	_DIN_LODING_PURGE_01_INPUT, // INDEX 600
	_DIN_LODING_PURGE_02_INPUT,
	_DIN_LODING_PAPER_VAC_01,
	_DIN_LODING_PAPER_VAC_02,
	_DIN_LODING_PAPER_VAC_03,
	_DIN_LODING_PAPER_VAC_04,
	_DIN_LODING_PAPER_VAC_05,
	_DIN_LODING_PAPER_VAC_06,
	_DIN_LODING_PAPER_VAC_07,
	_DIN_LODING_PAPER_VAC_08,
	_DIN_LODING_MASK_VAC_01,
	_DIN_LODING_MASK_VAC_02,
	_DIN_LODING_MASK_VAC_03,
	_DIN_LODING_MASK_VAC_04,
	_DIN_UNLODING_PURGE_01_INPUT,
	_DIN_UNLODING_PURGE_02_INPUT,
	_DIN_UNLODING_PAPER_VAC_01,
	_DIN_UNLODING_PAPER_VAC_02,
	_DIN_UNLODING_PAPER_VAC_03,
	_DIN_UNLODING_PAPER_VAC_04,
	_DIN_UNLODING_PAPER_VAC_05,
	_DIN_UNLODING_PAPER_VAC_06,
	_DIN_UNLODING_PAPER_VAC_07,
	_DIN_UNLODING_PAPER_VAC_08,
	_DIN_UNLODING_MASK_VAC_01,
	_DIN_UNLODING_MASK_VAC_02,
	_DIN_UNLODING_MASK_VAC_03,
	_DIN_UNLODING_MASK_VAC_04,
	_DIN_628,
	_DIN_629,
	_DIN_630,
	_DIN_631,

	_DIN_MAX,
}enum_Di; // KTY 20210907

//DOUTPUT
typedef enum // KTY 20210907
{
	_DOUT_0,
	_DOUT_1,
	_DOUT_2,
	_DOUT_3,
	_DOUT_4,
	_DOUT_5,
	_DOUT_6,
	_DOUT_7,
	_DOUT_8,
	_DOUT_9,
	_DOUT_10,
	_DOUT_11,
	_DOUT_12,
	_DOUT_13,
	_DOUT_MC20,
	_DOUT_MC21,
	_DOUT_MC22,
	_DOUT_MC23,
	_DOUT_MC24,
	_DOUT_MC25,
	_DOUT_MC26,
	_DOUT_MC27,
	_DOUT_MC28,
	_DOUT_MC29,
	_DOUT_MC30,
	_DOUT_BUZZER_MELODY_01,
	_DOUT_BUZZER_MELODY_02,
	_DOUT_BUZZER_MELODY_03,
	_DOUT_BUZZER_MELODY_04,
	_DOUT_TOWER_LAMP_RED,
	_DOUT_TOWER_LAMP_YELLOW,
	_DOUT_TOWER_LAMP_GREEN, //INDEX 31

	_DOUT_RELAY_1, // INDEX 100
	_DOUT_RELAY_2,
	_DOUT_RELAY_3,
	_DOUT_103,
	_DOUT_104,
	_DOUT_105,
	_DOUT_IONIZER_ON_SOL,
	_DOUT_IONIZER_OFF_SOL,
	_DOUT_PAD_BOX_ON_SOL,
	_DOUT_PAD_BOX_OFF_SOL,
	_DOUT_PICK_UNIT_FW_SOL,
	_DOUT_PICK_UNIT_BW_SOL,
	_DOUT_PICK_UNIT_OPEN_SOL,
	_DOUT_PICK_UNIT_CLOSE_SOL,
	_DOUT_SPARE_SOL2_A,
	_DOUT_SPARE_SOL2_B,
	_DOUT_SIGLE_SOLENOID_VALVE,
	_DOUT_117,
	_DOUT_118,
	_DOUT_119,
	_DOUT_FRONT_DOOR,
	_DOUT_RIGHT_DOOR,
	_DOUT_BACK_DOOR,
	_DOUT_LEFT_DOOR,
	_DOUT_124,
	_DOUT_125,
	_DOUT_126,
	_DOUT_127,
	_DOUT_128,
	_DOUT_129,
	_DOUT_130,
	_DOUT_131,

	_DOUT_200, // INDEX 200
	_DOUT_201,
	_DOUT_202,
	_DOUT_203,
	_DOUT_204,
	_DOUT_205,
	_DOUT_206,
	_DOUT_207,
	_DOUT_208,
	_DOUT_209,
	_DOUT_210,
	_DOUT_211,
	_DOUT_212,
	_DOUT_213,
	_DOUT_214,
	_DOUT_215,
	_DOUT_216,
	_DOUT_217,
	_DOUT_218,
	_DOUT_219,
	_DOUT_220,
	_DOUT_221,
	_DOUT_222,
	_DOUT_223,
	_DOUT_LASER_POINT_01_AOI,
	_DOUT_DISPLACEMENT_SENSOR_RELAY,
	_DOUT_ZOOM_CONTROLLER,
	_DOUT_LODING_MS_POWER_RELAY,
	_DOUT_LASER_POINT_02_LOAD_CAMERA,
	_DOUT_CAPACITY_CONTROLLER,
	_DOUT_230,
	_DOUT_ION, // INDEX 231

	_DOUT_LODING_MASK_VAC_04, // INDEX 300
	_DOUT_LODING_MASK_PURGE_04,
	_DOUT_LODING_PAPER_VAC_01,
	_DOUT_LODING_PAPER_PURGE_01,
	_DOUT_LODING_PAPER_VAC_02,
	_DOUT_LODING_PAPER_PURGE_02,
	_DOUT_LODING_PAPER_VAC_03,
	_DOUT_LODING_PAPER_PURGE_03,
	_DOUT_LODING_PAPER_VAC_04,
	_DOUT_LODING_MASK_VAC_01,
	_DOUT_LODING_MASK_PURGE_01,
	_DOUT_LODING_MASK_VAC_02,
	_DOUT_LODING_MASK_PURGE_02,
	_DOUT_LODING_MASK_VAC_03,
	_DOUT_LODING_MASK_PURGE_03,
	_DOUT_LODING_PAPER_PURGE_04, //Check
	_DOUT_UNLODING_MASK_VAC_04,
	_DOUT_UNLODING_MASK_PURGE_04,
	_DOUT_UNLODING_PAPER_VAC_01,
	_DOUT_UNLODING_PAPER_PURGE_01,
	_DOUT_UNLODING_PAPER_VAC_02,
	_DOUT_UNLODING_PAPER_PURGE_02,
	_DOUT_UNLODING_PAPER_VAC_03,
	_DOUT_UNLODING_PAPER_PURGE_03,
	_DOUT_UNLODING_PAPER_VAC_04,
	_DOUT_UNLODING_PAPER_PURGE_04,
	_DOUT_UNLODING_MASK_VAC_01,
	_DOUT_UNLODING_MASK_PURGE_01,
	_DOUT_UNLODING_MASK_VAC_02,
	_DOUT_UNLODING_MASK_PURGE_02,
	_DOUT_UNLODING_MASK_VAC_03,
	_DOUT_UNLODING_MASK_PURGE_03, // INDEX 331

	_DOUT_GRIPPER_L1_CLOSE_SOL, // INDEX 400
	_DOUT_GRIPPER_L1_OPEN_SOL,
	_DOUT_GRIPPER_L2_CLOSE_SOL,
	_DOUT_GRIPPER_L2_OPEN_SOL,
	_DOUT_GRIPPER_L3_CLOSE_SOL,
	_DOUT_GRIPPER_L3_OPEN_SOL,
	_DOUT_GRIPPER_R1_CLOSE_SOL,
	_DOUT_GRIPPER_R1_OPEN_SOL,
	_DOUT_GRIPPER_R2_CLOSE_SOL,
	_DOUT_GRIPPER_R2_OPEN_SOL,
	_DOUT_GRIPPER_R3_CLOSE_SOL,
	_DOUT_GRIPPER_R3_OPEN_SOL,
	_DOUT_SPARE_SOL1_A,
	_DOUT_SPARE_SOL1_B,
	_DOUT_414,
	_DOUT_415,
	_DOUT_416,
	_DOUT_417,
	_DOUT_418,
	_DOUT_419,
	_DOUT_420,
	_DOUT_421,
	_DOUT_422,
	_DOUT_423,
	_DOUT_424,
	_DOUT_425,
	_DOUT_426,
	_DOUT_427,
	_DOUT_428,
	_DOUT_429,
	_DOUT_430,
	_DOUT_431,

	_DOUT_MAX,
}enum_Do; // KTY 20210907

//AINPUT
typedef enum // KTY 20210907
{
	_AIN_CDA_MAIN_AIR,
	_AIN_1,
	_AIN_2,
	_AIN_3,
	_AIN_4,
	_AIN_5,
	_AIN_6,
	_AIN_7,
	_AIN_8,
	_AIN_9,
	_AIN_10,
	_AIN_11,
	_AIN_12,
	_AIN_13,
	_AIN_14,
	_AIN_15,
	_AIN_MAIN_AIR_PRESSURE, // INDEX 100
	_AIN_SUPPLY_PRESSURE,
	_AIN_GANTRY_X_AXIS_1_PRESSURE,
	_AIN_GANTRY_X_AXIS_2_PRESSURE,
	_AIN_GANTRY_Y_AXIS_1_PRESSURE,
	_AIN_GANTRY_Y_AXIS_2_PRESSURE,
	_AIN_ISOLATOR_1_PRESSURE_ACT_H,
	_AIN_ISOLATOR_2_PRESSURE_ACT_V,
	_AIN_108,
	_AIN_109,
	_AIN_110,
	_AIN_111,
	_AIN_GANTRY_REGULATOR_Y1,
	_AIN_GANTRY_REGULATOR_Y2,
	_AIN_GANTRY_REGULATOR_X_TOP,
	_AIN_GANTRY_REGULATOR_X_BOTTOM, //INDEX 115

	_AIN_INSPECION_STAGE_VAC_INSIDE, // INDEX 200,
	_AIN_INSPECION_STAGE_VAC_OUTSIDE,
	_AIN_CDA_AIR_1,
	_AIN_CDA_AIR_2,
	_AIN_CDA_AIR_3,
	_AIN_CDA_AIR_4,
	_AIN_CDA_AIR_5,
	_AIN_CDA_AIR_6,
	_AIN_N2_AIR,
	_AIN_209,
	_AIN_210,
	_AIN_211,
	_AIN_212,
	_AIN_213,
	_AIN_214,
	_AIN_215,

	_AIN_300, // = 300,
	_AIN_301,
	_AIN_302,
	_AIN_303,
	_AIN_304,
	_AIN_305,
	_AIN_306,
	_AIN_307,
	_AIN_308,
	_AIN_309,
	_AIN_310,
	_AIN_311,
	_AIN_312,
	_AIN_313,
	_AIN_314,
	_AIN_315,

	_AIN_MAX,
}enum_Ai; // KTY 20210907

//AOUTPUT
typedef enum // KTY 20210907
{


	_AOUT_MAX,
}enum_Ao; // KTY 20210907

typedef enum
{
	eBOX_DATA_LR = 0,
	eBOX_DATA_LC,
	eBOX_DATA_RESET,
	eBOX_DATA_UR,
	eBOX_DATA_UC,

	eBOX_DATA_INTERFACE_MAX,
}enum_BOX_DATA_INTERFACE;

typedef enum
{
	eAXIS_SPEED_LOW = 0,
	eAXIS_SPEED_MEDIUM,
	eAXIS_SPEED_HIGH,
}enum_AXIS_SPEED;

enum enum_AxisDir
{
	eDIR_NONE,
	eDIR_PLUS,
	eDIR_MINUS
};

typedef enum
{
	eMOVE_DIR_P = 0,
	eMOVE_DIR_N,

	eMOVE_DIR_MAX,
}enum_MoveDir;

typedef enum
{
	eAOI_DIR_FWD = 0,
	eAOI_DIR_BWD,
}enum_AOI_Move_Dir;

typedef enum
{
	eAOI_Vel_50 = 0,
	eAOI_Vel_100,
	eAOI_Vel_150,
	eAOI_Vel_200,

	eAOI_Vel_Max
}enum_AOI_Vel_Level;

typedef enum
{
	eCamView_NONE = -1,

	eCamView_6G = 0,
	eCamView_8G
}enum_Camera_ViewMode;

typedef enum
{
	eALIGN_DATA_USE_SW_MAPPING_DATA = 0,
	eALIGN_DATA_USE_XYT_ALIGN_DATA

}enum_ALIGN_DATA_USE_MODE;

typedef enum
{
	eSTICK_TENSION_NO = 0,
	eSTICK_TENSION_ONCE,
	eSTICK_TENSION_ALIGN
}enum_STICK_TENSION_USE_MODE;

typedef enum
{
	FMM_SUCCESS,

	FMM_COMM_ERROR_SIZE,
	FMM_COMM_ERROR_LRC,
	FMM_COMM_ERROR_TRANSACTION_ID,
	FMM_COMM_ERROR_PROTOCOL_ID,
	FMM_COMM_ERROR_UNIT_ID,
	FMM_COMM_ERROR_FC,
	FMM_COMM_FUNCTION_ADDR,
	FMM_COMM_TIME_OUT,

	FMM_MOTION_NOT_HOMING,
	FMM_MOTION_SERVO_OFF,
	FMM_MOTION_IS_ALARM,
	FMM_MOTION_IS_BUSY,
	FMM_MOTION_IS_P_LIMIT,
	FMM_MOTION_IS_N_LIMIT,

	FMM_STRETCH_STEP_COUNT,
	FMM_STRETCH_IS_RUNNING,
	FMM_CLAMP_IS_RUNNING,

	FFMM_RETURN_VALUE_MAX
} en_ULTRA_RETURN_VALUE;

#pragma region //Manual Dlg Axis
typedef enum {
	_eMANUAL_GANTRY_AXIS_NONE = -1,

	_eMANUAL_GANTRY_AXIS_GANTRY_X = 0,
	_eMANUAL_GANTRY_AXIS_GANTRY_Y,
	_eMANUAL_GANTRY_AXIS_GANTRY_Z1,
	//_eMANUAL_GANTRY_AXIS_GANTRY_Z2,
	//_eMANUAL_GANTRY_AXIS_GANTRY_Z3,
	//_eMANUAL_GANTRY_AXIS_3D_CAMERA_SUB_Z,

	_eMANUAL_GANTRY_AXIS_MAX
}enum_Gantry_Axis;

typedef enum {
	_eMANUAL_INSP_STAGE_AXIS_STAGE_Y1 = 0,
	_eMANUAL_INSP_STAGE_AXIS_STAGE_Y2,
	_eMANUAL_INSP_STAGE_AXIS_STAGE_X,

	_eMANUAL_INSP_STAGE_MAX,
}enum_Inspect_Stage_Axis;

typedef enum {
	_eMANUAL_LOADER_AXIS_Z = 0,
	_eMANUAL_LOADER_AXIS_X,
	_eMANUAL_LOADER_AXIS_SUB_ZL,//21.02.09 SJC
	_eMANUAL_LOADER_AXIS_SUB_ZR,//21.02.09 SJC
	_eMANUAL_LOADER_AXIS_Y,//21.02.10 SJC

	_eMANUAL_LOADER_AXIS_MAX,
}enum_Loader_Axis;

typedef enum {
	_eMANUAL_UNLOADER_AXIS_Y = 0, //PaperUnloader Y
	_eMANUAL_PAPER_UNLOADER_AXIS_XL,
	_eMANUAL_PAPER_UNLOADER_AXIS_XR,
	_eMANUAL_UNLOADER_AXIS_X, //MaskUnloader X
	_eMANUAL_UNLOADER_AXIS_Z,
	_eMANUAL_UNLOADER_AXIS_SUB_ZL,
	_eMANUAL_UNLOADER_AXIS_SUB_ZR,
	_eMANUAL_UNLOADER_AXIS_GANTRY_Y,

	_eMANUAL_UNLOADER_AXIS_MAX,
}enum_Unloader_Axis;

typedef enum {
	_eMANUAL_CASSETTE_AXIS_Z = 0,

	_eMANUAL_CASSETTE_AXIS_MAX,
}enum_Cassette_Axis;
#pragma endregion

#pragma region //Axis Pos
typedef enum {
	_eGANTRY_X_WAIT_POS = 0,

	_eGANTRY_Y_WAIT_POS,
	_eGANTRY_Y_STICK_LOAD_IN_BOX_POS,
	_eGANTRY_Y_PAPER_UNLOAD_POS,
	_eGANTRY_Y_STICK_UNLOAD_TO_STAGE_POS,
	//21.02.09JSC
	_eGANTRY_Y_LOADING_SAFE_POS,
	_eGANTRY_Y_UNLOADING_SAFE_POS,
	//

	_eGANTRY_Y_STICK_LOAD_IN_STAGE_POS,
	_eGANTRY_Y_STICK_UNLOAD_TO_BOX_POS,

	_eGANTRY_Z1_WAIT_POS,	
	_eGANTRY_Z1_PRE_ALIGN_POS,
	_eGANTRY_Z1_INSPECTION_REVIEW_POS,
	_eGANTRY_Z1_MAPPING_REVIEW_POS,

	//_eGANTRY_Z2_WAIT_POS,
	//_eGANTRY_Z2_PRE_ALIGN_POS,
	//_eGANTRY_Z2_INSPECTION_3D_POS,
	//_eGANTRY_Z2_REVIEW_AOI_POS,	

	//_eGANTRY_Z3_WAIT_POS,
	//_eGANTRY_Z3_INSPECTION_REVIEW_POS,
	//_eGANTRY_Z3_MAPPING_REVIEW_POS,

	//_eGANTRY_3D_CAMERA_SUB_Z_WAIT_POS,

	_eGANTRY_POS_MAX,
}enum_Gantry_Pos;

typedef enum {
	_eBOX_LOADING_STAGE_X_WAIT_POS = 0,
	_eBOX_LOADING_STAGE_X_STICK_LOAD_POS,
	_eBOX_LOADING_STAGE_X_STICK_UNLOAD_POS,

	_eBOX_LOADING_STAGE_Y_WAIT_POS,
	_eBOX_LOADING_STAGE_Y_STICK_LOAD_POS,
	_eBOX_LOADING_STAGE_Y_STICK_UNLOAD_POS,

	_eBOX_LOADING_STAGE_T_WAIT_POS,
	_eBOX_LOADING_STAGE_T_STICK_LOAD_POS,
	_eBOX_LOADING_STAGE_T_STICK_UNLOAD_POS,

	_eBOX_POS_MAX,
}enum_Box_Pos;

typedef enum {
	_eLOADER_Z_WAIT_POS = 0,
	_eLOADER_Z_STICK_LOAD_IN_BOX_1ST_POS,
	_eLOADER_Z_VIBRATION_POS, //KJT 20210317
	_eLOADER_Z_STICK_UNLOAD_TO_STAGE_POS,
	//¹Ý´ë·Î ÀÌ¼Û
	_eLOADER_Z_STICK_LOAD_IN_STAGE_1ST_POS,
	_eLOADER_Z_VIBRATION_OFFSET, //KJT 20210317
	_eLOADER_Z_STICK_UNLOAD_TO_BOX_POS,

	_eLOADER_Z_STEP_DOWN_COUNT,
	_eLOADER_Z_STEP_DOWN_OFFSET,
	_eLOADER_Z_STEP_UP_OFFSET,
	_eLOADER_Z_VIBRATION_COUNT,
	_eLOADER_Z_VIBRATION_VEL,
	//21.02.05 sjc
	//21.02.28 SJC
	_eLOADER_ZL_WAIT_POS,
	_eLOADER_ZR_WAIT_POS,
	_eLOADER_ZL_DOWN_POS,
	_eLOADER_ZR_DOWN_POS,

	///
	//21.02.10 sjc
	_eLOADER_Y_WAIT_POS,
	_eLOADER_Y_STICK_LOAD_POS,
	_eLOADER_Y_STICK_UNLOAD_POS,
	_eLOADER_Y_INSPECTION_POS,
	//
	_eLOADER_X_WAIT_POS,
	_eLOADER_X_TENSION_OFFSET,
	//
	_eLOADER_Z_INSPECTION_POS,

	_eLOADER_POS_MAX,
}enum_Loader_Pos;

typedef enum {
	_eINSPECTION_STAGE_X_WAIT_POS = 0,
	_eINSPECTION_STAGE_X_STICK_LOAD_POS,
	_eINSPECTION_STAGE_X_STICK_UNLOAD_POS,

	_eINSPECTION_STAGE_Y_WAIT_POS,
	_eINSPECTION_STAGE_Y_STICK_LOAD_POS,
	_eINSPECTION_STAGE_Y_STICK_UNLOAD_POS,

	_eINSPECTION_STAGE_T_WAIT_POS,
	_eINSPECTION_STAGE_T_STICK_LOAD_POS,
	_eINSPECTION_STAGE_T_STICK_UNLOAD_POS,

	_eBACKLIGHT_X_WAIT_POS,

	_eINSPECTION_STAGE_POS_MAX,
}enum_Inspection_Stage_Pos;

typedef enum {
	//Paper Unloader Y
	_eUNLOADER_Y_WAIT_POS = 0,
	_eUNLOADER_Y_LOAD_IN_STAGE_POS,
	_eUNLOADER_Y_UNLOAD_TO_CST_POS,
	_eUNLOADER_Y_PAPER_LOAD_POS,
	_eUNLOADER_Y_PAPER_LOAD_WAITING_POS,
	_eUNLOADER_Y_PAPER_UNLOAD_POS,
	_eUNLOADER_Y_CASSETTE_SAFETY_POS,
	_eUNLOADER_Y_LOAD_IN_CST_POS,
	_eUNLOADER_Y_UNLOAD_TO_STAGE_POS,

	//Paper Unloader X
	_ePAPER_UNLOADER_XL_WAIT_POS,
	_ePAPER_UNLOADER_XL_TENSION_OFFSET,

	//Mask Unloader X
	_eUNLOADER_X_WAIT_POS,
	_eUNLOADER_X_TENSION_OFFSET,

	//Mask Unloader Z
	_eUNLOADER_Z_WAIT_POS,
	_eUNLOADER_Z_LOAD_IN_STAGE_POS,
	_eUNLOADER_Z_UNLOAD_TO_CST_POS,
	_eUNLOADER_Z_PAPER_LOAD_POS,
	_eUNLOADER_Z_PAPER_UNLOAD_POS,
	_eUNLOADER_Z_LOAD_IN_CST_POS,
	_eUNLOADER_Z_UNLOAD_TO_STAGE_POS,
	_eUNLOADER_Z_VIBRATION_POS, //KJT 20210317
	
	_eUNLOADER_Z_VIBRATION_OFFSET, //KJT 20210317
	
	_eUNLOADER_Z_STEP_DOWN_COUNT,
	_eUNLOADER_Z_STEP_DOWN_OFFSET,
	_eUNLOADER_Z_STEP_UP_OFFSET,
	_eUNLOADER_Z_VIBRATION_COUNT,
	_eUNLOADER_Z_VIBRATION_VEL,

	//Paper Unloader Z
	_ePAPER_UNLOADER_ZL_WAIT_POS, 
	_ePAPER_UNLOADER_ZL_DOWN_POS,

	_ePAPER_UNLOADER_ZL_PAPER_LOAD_POS,
	_ePAPER_UNLOADER_ZL_PAPER_UNLOAD_POS,

	_eUNLOADER_POS_MAX
}enum_Unloader_Pos;

typedef enum {
	eJudge_OK = 0,
	eJudge_NG
}enum_Judge;  //KJT 20210521

typedef enum {
	eGRIPPER_Z_WAIT_POS = 0,
	eGRIPPER_Z_LOADING_POS,
	eGRIPPER_Z_CLAMP_POS,
	eGRIPPER_Z_TENSION_POS,
	eGRIPPER_Z_UNCLAMP_POS,

	eGRIPPER_RIGHT_Z_WAIT_POS ,
	eGRIPPER_RIGHT_Z_LOADING_POS,
	eGRIPPER_RIGHT_Z_CLAMP_POS,
	eGRIPPER_RIGHT_Z_TENSION_POS,
	eGRIPPER_RIGHT_Z_UNCLAMP_POS,

	eGRIPPER_Z_POS_MAX
}enum_Gripper_Z_Pos;
#pragma endregion

typedef enum
{
	eAUTO_FOCUS_NORMAL = 0,
	eAUTO_FOCUS_SMART,
}enum_AutoFocus_Mode;

typedef enum {
	_eMOVE_TYPE_JOG = 0,
	_eMOVE_TYPE_RELATIVE,
}enum_Move_Type;

typedef enum
{
	eMAPPING_ID_10X = 0,
	eMAPPING_ID_20X = 1,
	eMAPPING_ID_50X = 2,
	eMAPPING_ID_PreAlign = 3,

	eMAPPING_ID_MAX,
}enum_MappingID;

typedef enum
{
	eNormal_Para = 0,
	eAT_Para,
}enum_Material_Para_Use_Mode;

typedef enum
{
	eLIGHT_8CH_BOX_ALIGN_L_RING = 0,
	eLIGHT_8CH_BOX_ALIGN_R_RIGN = 1,
	eLIGHT_8CH_PREALIGN_REVIEW_RING = 2,
	eLIGHT_8CH_3 = 3,
	eLIGHT_8CH_BOX_ALIGN_L_COAXIAL = 4,
	eLIGHT_8CH_BOX_ALIGN_R_COALIAL = 5,
	eLIGHT_8CH_REVIEW_COAXIAL = 6,
	eLIGHT_8CH_PREALIGN_COAXIAL = 7,
}enum_LIGHT_8CH;

typedef enum
{
	eLIGHT_12CH_REVIEW_RING_1 = 0,
	eLIGHT_12CH_REVIEW_RING_2 = 1,
	eLIGHT_12CH_REVIEW_RING_3 = 2,
	eLIGHT_12CH_REVIEW_RING_4 = 3,
	eLIGHT_12CH_REVIEW_RING_5 = 4,
	eLIGHT_12CH_REVIEW_RING_6 = 5,
	eLIGHT_12CH_REVIEW_RING_7 = 6,
	eLIGHT_12CH_REVIEW_RING_8 = 7,
	eLIGHT_12CH_9 = 8,
	eLIGHT_12CH_10 = 9,
	eLIGHT_12CH_11 = 10,
	eLIGHT_12CH_12 = 11,
}enum_LIGHT_12CH;

typedef enum
{
	eBACKLIGHT_CH1 = 12,
	eBACKLIGHT_CH2,
	eBACKLIGHT_CH3,
	eBACKLIGHT_CH4,
	eBACKLIGHT_CH5,
	eBACKLIGHT_CH6,
	eBACKLIGHT_CH7,
	eBACKLIGHT_CH8,
	eBACKLIGHT_CH9,

	eBACKLIGHT_MAX
}enum_CHANNEL_BACKLIGHT;

typedef enum
{
	eAOI_LIGHT_CH1 = 0,
	eAOI_LIGHT_CH2,
	eAOI_LIGHT_CH3,
	eAOI_LIGHT_CH4,
	eAOI_LIGHT_CH5,
	eAOI_LIGHT_CH6,
	eAOI_LIGHT_CH7,
	eAOI_LIGHT_CH8,
	eAOI_LIGHT_CH9,
	eAOI_LIGHT_CH10,
	eAOI_LIGHT_CH11,
	eAOI_LIGHT_CH12,

	eAOI_LIGHT_MAX
}enum_CHANNEL_AOI_LIGHT;

typedef enum
{
	_eAOI_AXIS_INDEX_CAMERA_Z1 = 0,
	_eAOI_AXIS_INDEX_CAMERA_Z2,
	_eAOI_AXIS_INDEX_GANTRY_X,
	_eAOI_AXIS_INDEX_GANTRY_Y,
	_eAOI_AXIS_INDEX_BACKLIGHT_X,

	_eAOI_CTRL_AXIS_INDEX_MAX,
}enum_AOI_AXIS_INDEX;

typedef enum
{
	eVAC_LOADER_STICK_1 = 0x1,
	eVAC_LOADER_STICK_2 = 0x2,
	eVAC_LOADER_STICK_3 = 0x4,
	eVAC_LOADER_STICK_4 = 0x8,
	eVAC_LOADER_STICK_5 = 0x10,
	eVAC_LOADER_STICK_6 = 0x20,
	eVAC_LOADER_STICK_7 = 0x40,
	eVAC_LOADER_STICK_8 = 0x80,

	eVAC_LOADER_STICK_ALL = 0xFF,
}enum_VAC_LOADER_STICK;

typedef enum
{
	eVAC_LOADER_PAPER_1 = 0x1,
	eVAC_LOADER_PAPER_2 = 0x2,
	eVAC_LOADER_PAPER_3 = 0x4,
	eVAC_LOADER_PAPER_4 = 0x8,
	//eVAC_LOADER_PAPER_5 = 0x10,
	//eVAC_LOADER_PAPER_6 = 0x20,
	//eVAC_LOADER_PAPER_7 = 0x40,
	//eVAC_LOADER_PAPER_8 = 0x80,

	eVAC_LOADER_PAPER_ALL = 0xFF,
}enum_VAC_LOADER_PAPER;

typedef enum
{
	eVAC_UNLOADER_STICK_1 = 0x1,
	eVAC_UNLOADER_STICK_2 = 0x2,
	eVAC_UNLOADER_STICK_3 = 0x4,
	eVAC_UNLOADER_STICK_4 = 0x8,
	eVAC_UNLOADER_STICK_5 = 0x10,

	eVAC_UNLOADER_STICK_ALL = 0xFF,
}enum_VAC_UNLOADER_STICK;

typedef enum
{
	eVAC_UNLOADER_PAPER_1 = 0x1,
	eVAC_UNLOADER_PAPER_2 = 0x2,
	eVAC_UNLOADER_PAPER_3_4 = 0x4,
	eVAC_UNLOADER_PAPER_5 = 0x8,
	eVAC_UNLOADER_PAPER_6 = 0x10,

	eVAC_UNLOADER_PAPER_ALL = 0xFF,
}enum_VAC_UNLOADER_PAPER;

typedef enum
{
	eDiv_1 = 0,
	eDiv_2,
	eDiv_3,
	eDiv_4,
	eDiv_5,

	eDiv_MAX
}enum_PPA_Div; //KJT 20210525
typedef enum
{
	eQuantity_1X1 = 0,
	eQuantity_3X3,
	eQuantity_5X5,

	eQuantity_MAX,
}enum_PPA_Quantity;

typedef enum //KJT 20210428
{
	eSTICK_PAPER_PAPER_STICK = 0,
	eSTICK_PAPER_STICK,
	eSTICK_STICK //KJT 20210526 Add
}enum_BOX_STICK_EXIST_TYPE;

typedef enum
{
	eBLACK = 0,
	eWHITE,
}enum_WHITE_BLACK_TYPE;

typedef enum
{
	eInMotionCheck_DeleyTime = 0,
	eInMotionCheck_BusyInPos,
	eInMotionCheck_Busy
}enum_SmartAutoFocus_InMotionCheckMode;

typedef enum
{
	eScanMode_SmartScan = 0,
	eScanMode_SingleDirectionScan,
	eScanMode_DualDirectionScan
}enum_SmartAutoFocus_ScanMode;


typedef enum
{
	eCOMBO_AUTO_RUN_FLOW_NONE = -1, //KJT 20210505

	eCOMBO_AUTO_RUN_FLOW_MAX,
}enum_AutoRunFlowName;

//typedef enum
//{
//	eRepeat_Review10X = 0,
//	eRepeat_PreAlign,
//}enum_Repeat_CamSelect;

typedef enum
{
	eFocusType_None = 0,
	eFocusType_Laser,
	eFocusType_Image,
	eFocusType_Both,
}enum_FocusType;

typedef enum
{
	eBlack = 0,
	eWhite,
}enum_BlackWhiteType;

typedef enum
{
	eFind_Circle = 0,
	eFind_Blob,
	eFind_PPA,
}enum_Repeat_FindType;

typedef enum
{
	eMark_Blob = 0,
	eMark_Pattern,
}enum_MarkType;

typedef enum
{
	eLight_Front = 0,
	eLight_Back,
}enum_LightType;

typedef enum
{
	eSwAlign_EdgeSlot = 0,
	eSwAlign_EdgeCell,
	eSwAlign_Tegkey,
	eSwAlign_Glass
}enum_SwAlignType; //KJT 20210419

enum {
	eMETHOD_NO_USE,
	eMETHOD_NORMAL,
	eMETHOD_COMBO,
	eMETHOD_CHECK_BOX,
};

enum {
	eMACHINE_MODE_NORMAL,
	eMACHINE_MODE_REPAIR,
	eMACHINE_MODE_IDLE,
	eMACHINE_MODE_MAX,
};

enum enum_TowerLampStatus
{
	TOWER_LAMP_ON = 0,
	TOWER_LAMP_OFF,
	TOWER_LAMP_BLINK,
};
typedef enum _MACHINE_STATUS_ENUM
{
	eMACHINE_STATUS_PM = 1,
	eMACHINE_STATUS_PAUSE,
	eMACHINE_STATUS_RUN,
	eMACHINE_STATUS_IDLE,
	eMACHINE_STATUS_BM,
	eMACHINE_STATUS_WARNING,
	eMACHINE_STATUS_LAMP_OFF,
	eMACHINE_STATUS_MAX
}MACHINE_STATUS_ENUM, *PMACHINE_STATUS_ENUM;

enum enum_AlarmState
{
	ALARM_STATE_CLEAR = 0,
	ALARM_STATE_SET,
};

enum enum_AlarmUnit
{
	ALARM_UNIT_MACHINE_LEVEL = 0,
	ALARM_UNIT_1,
	ALARM_UNIT_2,
	ALARM_UNIT_3,
	ALARM_UNIT_4,
	ALARM_UNIT_5,
	ALARM_UNIT_6,
	ALARM_UNIT_7,
	ALARM_UNIT_8,
	ALARM_UNIT_9,
	ALARM_UNIT_10,
	ALARM_UNIT_11,
	ALARM_UNIT_12,
	ALARM_UNIT_13,
	ALARM_UNIT_14,
	ALARM_UNIT_15,
};

enum enum_AlarmCode //KJT 20210324
{
	ALARM_CODE_DANGER_FOR_HUMAN = 1,
	ALARM_CODE_MACHINE_HW_ERROR,
	ALARM_CODE_MACHINE_SW_ERROR,
	ALARM_CODE_GLASS_OR_PANEL_INFO_ERROR,
	ALARM_CODE_GLASS_OR_PANEL_TROUBLE,
	ALARM_CODE_MATERIAL_OR_UTILITY_ERROR,
	ALARM_CODE_PARAMETER_OVERFLOW_CAUSED_PROCESS_ERROR,
	ALARM_CODE_PARAMETER_OVERFLOW_CAUSED_MACHINE_CANT_WORK,
	ALARM_CODE_PARAMETER_CONFIG_ERROR,
	ALARM_CODE_CANNOT_RECOVER_TROUBLE,
	ALARM_CODE_MACHINE_STATUS_WARNING,
	ALARM_CODE_ROBOT_TROUBLE,
	ALARM_CODE_CIM_PC_T1_TIMEOUT,
	ALARM_CODE_CIM_PC_T2_TIMEOUT,
	ALARM_CODE_UPSTREAM_MACHINE_LINK_SIGNAL_TIMEOUT,
	ALARM_CODE_DOWNSTREAM_MACHINE_LINK_SIGNAL_TIMEOUT,
	ALARM_CODE_CIM_PC_REPLY_IS_NOT_OFF_YET,
	ALARM_CODE_OTHER,
};

enum enum_OtherAlarm {
	OTHER_ALARM_ISOLATOR,
	OTHER_ALARM_GRIPPER_GANTRY_TOP,
	OTHER_ALARM_GRIPPER_GANTRY_BOTTOM,
	OTHER_ALARM_MAX = 10
};

enum enum_AlarmType
{
	ALARM_TYPE_WARNING = 0,
	ALARM_TYPE_ERROR,
};

#pragma region  //Erro Number
typedef enum
{
	eUNKNOWN_FLOW = -1,

	ePAPER_UNLOAD_FLOW					= 500,
	eBOX_ALIGN_FLOW						= 600,
	eSTICK_LOAD_IN_BOX_TO_STAGE_FLOW	= 700,
	ePRE_ALIGN_FLOW						= 800,
	eMAIN_ALIGN_FLOW					= 900,
	eTEGKEY_ALIGN_FLOW					= 1000,
	eEDGE_ALIGN_FLOW					= 1100,
	eSW_FLOW							= 1200,
	eTP_FLOW							= 1300,
	ePPA_FLOW							= 1400,
	eAOI_FLOW							= 1500,
	eAOI_REVIEW_FLOW					= 1600,
	e3D_FLOW							= 1700,
	eSTICK_UNLOAD_IN_STAGE_TO_CST_FLOW	= 1800,
	ePAPER_LOAD_FLOW					= 1900,	

	eSTICK_CLAMP_TENSION_FLOW			= 2000,
	eTENSION_PRE_ALIGN_2P_FLOW			= 2100,
	eTENSION_MAIN_ALIGN_2P_FLOW			= 2200,
	eEDGE_TENSION_ALIGN_FLOW			= 2300,
	eSTICK_RELEASE_UNCLAMP_FLOW			= 2400,
	eSTICK_CLAMP_TENSION_UNCLAMP_FLOW	= 2500,

	eAOI_DEFECT_POS_MOVE_ONCE_FLOW		= 2700,

	eVERTICAL_ALIGN_FLOW				= 3000,	//KJT 202120311
	eGLASS_4P_ALIGN_FLOW				= 3100,	//KJT 202120314
	eMEASURE_CD_FLOW					= 3200,	//KJT 20210412
	eGLASS_MAPPING_FLOW					= 3300,	//KJT 20210419	
	eGLASS_FLATNESS_FLOW				= 3400,	
	eREPEAT_MEASURE_FLOW				= 3500,
	eRIGHT_ANGLE_FLOW					= 3600,

	eCST_RECV_READY_FLOW				= 3700,
	eCST_RECV_DONE_FLOW					= 3800,

	eSTICK_LOAD_IN_STAGE_TO_BOX_FLOW	= 4000,

	eCAMERA_CAL_FLOW					= 4300,

	eORIGIN_ALL_FLOW					= 5000,
	eORIGIN_STRETCH_FLOW				= 5100,
	eORIGIN_GRIPPER_Z_FLOW				= 5200,
	eORIGIN_LOADER_Y_FLOW				= 5300,
	eORIGIN_UNLOADER_Y_FLOW				= 5400,
	eORIGIN_MASTER_SLAVE_AXIS_FLOW = 5500,

	eREADY_UNLOADER_FLOW				= 6000,
	eREADY_LOADER_FLOW					= 6100,
	eREADY_GANTRY_ZX_FLOW				= 6200,
	eREADY_GANTRY_AVOID_UNLOADER_FLOW	= 6300,	
	eREADY_GRIPPER_FLOW					= 6400,
	eREADY_CASSETTE_SAFETY_UNLOADER_FLOW = 6500,
	eREADY_PAPER_UNLOADER_FLOW			= 6600,
	eREADY_GANTRY_AVOID_BOX_FLOW		= 6700,

	eCAMERA_SWAP_FLOW					 = 7000,

	eSTICK_PAPER_LOAD_FLOW = 10000,
	eSTICK_PAPER_UNLOAD_FLOW = 10500,

}enum_Flow;
typedef enum
{
	eSERVO_OFF_ERROR = 0,
	eHOME_STATUS_ERROR,
	eLIMIT_N_ERROR,
	eLIMIT_P_ERROR,
	eTARGET_POS_ERROR_BY_SAFETY_MIN,
	eTARGET_POS_ERROR_BY_SAFETY_MAX,
	eCURRENT_NOT_SAFETY_POS_ERROR,
}enum_ErrorType;
#pragma endregion

enum enum_VCR
{
	VCR_NOMAL = 0,
	VCR_KEY_IN,
	VCR_SKIP,
};

typedef struct _stPOS_XYZ
{
	_stPOS_XYZ()
	{
		dPosX = 0.0;
		dPosY = 0.0;
		dPosZ1 = 236.59510; //Wait Pos
		dPosZ2 = 260.0; //Wait Pos
		dPosZ3 = 328.52350; //Wait Pos
	}

	double dPosX;
	double dPosY;
	double dPosZ1;
	double dPosZ2;
	double dPosZ3;
}stPOS_XYZ, *pstPOS_XYZ;

typedef struct __CELL_INFO
{
	CString ColName;
	INT nColSize;
	COLORREF crTextColorInfo;
	COLORREF crBkColorInfo;
	INT nInputMethod;

}stCellInfo;

typedef struct __stCOMBO_INFO
{
	//BOOL bUse;
	INT nDataQuan;
	CString nListData[MAX_LIST_DATA_NUM];
}stComboInfo;

typedef struct _FLATNESS_TABLE {
	double	dPosX;
	double	dPosY;
	double	dPosZ;
	double	dResult;
	double	dPreResult;

	//int			nTool;
	//int			nLightCoaxial;
	//int			nLightRing;
	//int			nThreshold;

	double	dResultZ;
}FLATNESS_TABLE, *pFLATNESS_TABLE;

typedef struct tag_ALARM_LIST
{
	CString AlarmDate;
	CString AlarmTime;
	int  AlarmCode;
	int AlarmLevel;
	CString AlarmText;
}ALARM_LIST, *PALARM_LIST;

typedef struct _MAPPING_TABLE {
	double	dPosX;
	double	dPosY;

	double dErrorX;
	double dErrorY;

	double	dResultX;
	double	dResultY;
}MAPPING_TABLE, *pMAPPING_TABLE;

typedef struct _CAMERA_CAL_TABLE {
	double	dPixelX;
	double	dPixelY;

	double	dWorldX;
	double	dWorldY;
	double	dWorldZ;

	double dErrorX;
	double dErrorY;
}CAMERA_CAL_TABLE, *pCAMERA_CAL_TABLE;

typedef struct {
	double x;
	double y;
	double z;	// added by ansmoon
}CPointD;


typedef struct _PPA_POS
{
	int nNo;
	double dPosX;
	double dPosY;
	//double dPitchX;
	//double dPitchY;
	double dCdX;
	double dCdY;

	double dResultPpaX;
	double dResultPpaY;
	double dResultPpaZ;

	double dResultCdX;
	double dResultCdY;

	double dResultIndividual_CdX[MAX_PPA_NUM]; //KJT 20210524
	double dResultIndividual_CdY[MAX_PPA_NUM]; //KJT 20210524

	_PPA_POS()
	{
		nNo = 0;
		dPosX = 0.0;
		dPosX = 0.0;
		//dPitchX = 0;
		//dPitchY = 0;
		dCdX = 0;
		dCdY = 0;

		dResultPpaX = 0;
		dResultPpaY = 0;
		dResultPpaZ = 0;

		dResultCdX = 0;
		dResultCdY = 0;

		memset(dResultIndividual_CdX, 0x0, sizeof(dResultIndividual_CdX)); //KJT 20210524
		memset(dResultIndividual_CdY, 0x0, sizeof(dResultIndividual_CdY)); //KJT 20210524
	}
}PPA_POS;

struct ERROR_INFO {

	ERROR_INFO() {
		csModelID = _T("Test");
		csFrameID = _T("FQRR2001");
		csMaskID = _T("Mask");
		csCellID = _T("C");
		cslayerID = _T("R");
		csKeyType = _T("PPA"); // 0 = 

		nFlowID = 0;
		nPPAPos = 0;
		nProcessID = 0;
		nRetry = 0;
		nPPAPos = 0;
		nCameraID = 2;	// 2 = x10
		nKeyID = 0;		// 0 = 

		for (int i = 0; i < 9; i++)
		{
			dPPA_X[i] = 0.0;
			dPPA_Y[i] = 0.0;
			dCD_X[i] = 0.0;
			dCD_Y[i] = 0.0;
		}

		dPPA_RefPos[0] = 0.0;
		dPPA_RefPos[1] = 0.0;

		dPPA_RefShiftPos[0] = 0.0;
		dPPA_RefShiftPos[1] = 0.0;

		dPPA_Result[0] = 0.0;
		dPPA_Result[1] = 0.0;

		dTargetCD[0] = 35.0;
		dTargetCD[1] = 35.0;

		dPPA_X_AVE = 0.0;
		dPPA_Y_AVE = 0.0;;
		dCD_X_AVE = 0.0;
		dCD_Y_AVE = 0.0;
		dZfoucus = 0.0;

		nRetry = 0;

		dRib_X = 0;
		dRib_Y = 0;

		dPPA_FINAL[0] = 0.0;
		dPPA_FINAL[1] = 0.0;

		for (int i = 0; i < 10; i++)
			dLoadCell[i] = 0.0;

		for (int i = 0; i < 8; i++)
			dClampLoad[i] = 0.0;

		dChamberTemp = 0.0;

		for (int i = 0; i < 8; i++)
			dStretcherPos[i] = 0.0;

		dGripperZL = 0.0;
		dGripperZR = 0.0;
	}

	CString csModelID;
	CString csMaskID;
	CString csFrameID;
	CString csCellID;
	CString cslayerID;
	CString csKeyType; // 0 = 

	int nProcessID;
	int nFlowID;
	int nCameraID; // 0 = 
	int nKeyID; // 0 = 

	int nPPAPos;
	int nRetry;
	int nRepeat;

	double dPPA_X[9];
	double dPPA_Y[9];

	double dPPA_RefPos[2];
	double dPPA_RefShiftPos[2];
	double dPPA_Result[2];

	double dPPA_X_AVE;
	double dPPA_Y_AVE;

	double dPPA_FINAL[2];

	double dCD_X[9];
	double dCD_Y[9];

	double dTargetCD[2];

	double dCD_X_AVE;
	double dCD_Y_AVE;

	double dRib_X;
	double dRib_Y;
	double dZfoucus;



	double dChamberTemp;


	double dLoadCell[MAX_SF_NUM];
	double dClampLoad[MAX_SF_NUM];
	double dStretcherPos[MAX_SF_NUM];

	double dGripperZL;
	double dGripperZR;
};

typedef struct _TIME_STRUCT
{
	WORD Year;
	WORD Month;
	WORD Day;
	WORD Hour;
	WORD Minute;
	WORD Second;


}TIME_STRUCT, *PTIME_STRUCT;

#pragma region //Label
typedef struct tag_AxisLabel {

	//TCHAR m_chDescription[MAX_PATH];
	CString m_StrLabel;

}AxisLabel;

typedef struct tag_DInputLabel {

	//TCHAR m_chDescription[MAX_PATH];
	CString m_StrLabel;

}DInputLabel;

typedef struct tag_DOutputLabel {

	//TCHAR m_chDescription[MAX_PATH];
	CString m_StrLabel;

}DOutputLabel;

typedef struct tag_AInputLabel {

	//TCHAR m_chDescription[MAX_PATH];
	CString m_StrLabel;

}AInputLabel;

typedef struct tag_AOutputLabel {

	//TCHAR m_chDescription[MAX_PATH];
	CString m_StrLabel;

}AOutputLabel;

#pragma region //Repeat
typedef struct _REPEAT_TABLE {
	double	dPosX;
	double	dPosY;
	double	dPosZ;

	int		nMark;
	int		nThreshold;
	double	dSizeX;
	double	dSizeY;

	int		nFind; //BlackWhite
	int		nFocus; //FocusType
	int		nFindType;
	int		nCount;

	int		nPreCoaxial;
	int		nPreRing;

	int		nZoomCoaxial;
	int		nZoomRing;
	int		nZoomBackLight;
}REPEAT_TABLE, *PREPEAT_TABLE;

struct REPEAT_INFO {

	REPEAT_INFO() {
		dRefPosX = 0;
		dRefPosY = 0;
		dRefPosZ = 0;

		dFindX = 0;
		dFindY = 0;

		dTempValue[12] = { 0, };

	}

	double dRefPosX;
	double dRefPosY;
	double dRefPosZ;
	double dFindX;
	double dFindY;

	double dTempValue[12];

};

typedef struct _REPEAT_DATA {
	BOOL bFlagApplyCalib;
	BOOL bFlagApplySwAlign;

	int nCountDelay;
	int nLaserFocusDoneDelay;
	int nRepeat;

	int nPreCoaxial;
	int nPreRing;

	int nZoomCoaxial;
	int nZoomRing;
	int nZoomBackLight;
	int nThreshold;
	double dXOffset;
	double dYOffset;

	int nCamNumber;
	int nSlotQty; //KJT 20210807 Add
}REPEAT_DATA, *PREPEAT_DATA;
#pragma endregion

#pragma endregion
#endif
